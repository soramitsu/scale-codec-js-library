// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Collecting big decode trace and formatting it Error case 1`] = `
Array [
  "<[01] 20 74 65 73 74 20 73 74 72 02 08 20 74 65 73 74 20 73 74... (len: 118, used: 1)>
  StructA ğŸ¡ª .primitive ğŸ¡ª Bool: %O
<[20 74 65 73 74 20 73 74 72] 02 08 20 74 65 73 74 20 73 74 ff... (len: 117, used: 9)>
  StructA ğŸ¡ª .alias ğŸ¡ª TupleA ğŸ¡ª .0 ğŸ¡ª Str: %O
  StructA ğŸ¡ª .alias ğŸ¡ª TupleA: %O
<[02] 08 20 74 65 73 74 20 73 74 ff ff ff ff ff ff ff ff ff ff... (len: 108, used: 1)>
  StructA ğŸ¡ª .enum ğŸ¡ª EnumA: %O
<20 74 65 73 74 20 73 74 ff ff ff ff ff ff ff ff ff ff 6c 75... (len: 106)>
  StructA ğŸ¡ª .map ğŸ¡ª MapA ğŸ¡ª <key> ğŸ¡ª Str: ERROR - %s
  StructA ğŸ¡ª .map ğŸ¡ª MapA: <not computed>
  StructA: <not computed>
",
  true,
  "test str",
  Array [
    "test str",
  ],
  Object {
    "tag": "Empty",
  },
  [TypeError: The encoded data was not valid for encoding utf-8],
]
`;

exports[`Collecting big decode trace and formatting it Success case 1`] = `
Array [
  "<[01] 20 74 65 73 74 20 73 74 72 02 08 20 74 65 73 74 20 73 74... (len: 118, used: 1)>
  StructA ğŸ¡ª .primitive ğŸ¡ª Bool: %O
<[20 74 65 73 74 20 73 74 72] 02 08 20 74 65 73 74 20 73 74 72... (len: 117, used: 9)>
  StructA ğŸ¡ª .alias ğŸ¡ª TupleA ğŸ¡ª .0 ğŸ¡ª Str: %O
  StructA ğŸ¡ª .alias ğŸ¡ª TupleA: %O
<[02] 08 20 74 65 73 74 20 73 74 72 2c 74 75 70 6c 65 20 76 61... (len: 108, used: 1)>
  StructA ğŸ¡ª .enum ğŸ¡ª EnumA: %O
<[20 74 65 73 74 20 73 74 72] 2c 74 75 70 6c 65 20 76 61 6c 75... (len: 106, used: 9)>
  StructA ğŸ¡ª .map ğŸ¡ª MapA ğŸ¡ª <key> ğŸ¡ª Str: %O
<[2c 74 75 70 6c 65 20 76 61 6c 75 65] 2c 61 6e 6f 74 68 65 72... (len: 97, used: 12)>
  StructA ğŸ¡ª .map ğŸ¡ª MapA ğŸ¡ª <value> ğŸ¡ª TupleA ğŸ¡ª .0 ğŸ¡ª Str: %O
  StructA ğŸ¡ª .map ğŸ¡ª MapA ğŸ¡ª <value> ğŸ¡ª TupleA: %O
<[2c 61 6e 6f 74 68 65 72 20 6b 65 79] 2c 74 75 70 6c 65 20 76... (len: 85, used: 12)>
  StructA ğŸ¡ª .map ğŸ¡ª MapA ğŸ¡ª <key> ğŸ¡ª Str: %O
<[2c 74 75 70 6c 65 20 76 61 6c 75 65] 08 2c 74 75 70 6c 65 20... (len: 73, used: 12)>
  StructA ğŸ¡ª .map ğŸ¡ª MapA ğŸ¡ª <value> ğŸ¡ª TupleA ğŸ¡ª .0 ğŸ¡ª Str: %O
  StructA ğŸ¡ª .map ğŸ¡ª MapA ğŸ¡ª <value> ğŸ¡ª TupleA: %O
  StructA ğŸ¡ª .map ğŸ¡ª MapA: %O
<[2c 74 75 70 6c 65 20 76 61 6c 75 65] 34 61 6e 6f 74 68 65 72... (len: 60, used: 12)>
  StructA ğŸ¡ª .set ğŸ¡ª SetA ğŸ¡ª TupleA ğŸ¡ª .0 ğŸ¡ª Str: %O
  StructA ğŸ¡ª .set ğŸ¡ª SetA ğŸ¡ª TupleA: %O
<[34 61 6e 6f 74 68 65 72 20 74 75 70 6c 65] 01 01 01 08 01 02... (len: 48, used: 14)>
  StructA ğŸ¡ª .set ğŸ¡ª SetA ğŸ¡ª TupleA ğŸ¡ª .0 ğŸ¡ª Str: %O
  StructA ğŸ¡ª .set ğŸ¡ª SetA ğŸ¡ª TupleA: %O
  StructA ğŸ¡ª .set ğŸ¡ª SetA: %O
<[01] 01 01 08 01 02 03 03 08 00 00 01 01 20 74 65 73 74 20 73... (len: 34, used: 1)>
  StructA ğŸ¡ª .array ğŸ¡ª ArrayA ğŸ¡ª Bool: %O
<[01] 01 08 01 02 03 03 08 00 00 01 01 20 74 65 73 74 20 73 74... (len: 33, used: 1)>
  StructA ğŸ¡ª .array ğŸ¡ª ArrayA ğŸ¡ª Bool: %O
<[01] 08 01 02 03 03 08 00 00 01 01 20 74 65 73 74 20 73 74 72... (len: 32, used: 1)>
  StructA ğŸ¡ª .array ğŸ¡ª ArrayA ğŸ¡ª Bool: %O
  StructA ğŸ¡ª .array ğŸ¡ª ArrayA: %O
<[08 01 02 03 03] 08 00 00 01 01 20 74 65 73 74 20 73 74 72 2c... (len: 31, used: 5)>
  StructA ğŸ¡ª .bytesArray ğŸ¡ª BytesArrayA: %O
<[00] 01 01 20 74 65 73 74 20 73 74 72 2c 74 75 70 6c 65 20 76... (len: 24, used: 1)>
  StructA ğŸ¡ª .vec ğŸ¡ª VecEnumA ğŸ¡ª EnumA ğŸ¡ª ::Opt ğŸ¡ª OptionA: %O
  StructA ğŸ¡ª .vec ğŸ¡ª VecEnumA ğŸ¡ª EnumA: %O
<[20 74 65 73 74 20 73 74 72] 2c 74 75 70 6c 65 20 76 61 6c 75... (len: 21, used: 9)>
  StructA ğŸ¡ª .vec ğŸ¡ª VecEnumA ğŸ¡ª EnumA ğŸ¡ª ::Res ğŸ¡ª ResultA ğŸ¡ª ::Err ğŸ¡ª Str: %O
  StructA ğŸ¡ª .vec ğŸ¡ª VecEnumA ğŸ¡ª EnumA ğŸ¡ª ::Res ğŸ¡ª ResultA: %O
  StructA ğŸ¡ª .vec ğŸ¡ª VecEnumA ğŸ¡ª EnumA: %O
  StructA ğŸ¡ª .vec ğŸ¡ª VecEnumA: %O
<[2c 74 75 70 6c 65 20 76 61 6c 75 65] (len = used = 12)>
  StructA ğŸ¡ª .tuple ğŸ¡ª TupleA ğŸ¡ª .0 ğŸ¡ª Str: %O
  StructA ğŸ¡ª .tuple ğŸ¡ª TupleA: %O
  StructA: %O
",
  true,
  "test str",
  Array [
    "test str",
  ],
  Object {
    "tag": "Empty",
  },
  "test str",
  "tuple value",
  Array [
    "tuple value",
  ],
  "another key",
  "tuple value",
  Array [
    "tuple value",
  ],
  Map {
    "test str" => Array [
      "tuple value",
    ],
    "another key" => Array [
      "tuple value",
    ],
  },
  "tuple value",
  Array [
    "tuple value",
  ],
  "another tuple",
  Array [
    "another tuple",
  ],
  Set {
    Array [
      "tuple value",
    ],
    Array [
      "another tuple",
    ],
  },
  true,
  true,
  true,
  Array [
    true,
    true,
    true,
  ],
  Uint8Array [
    8,
    1,
    2,
    3,
    3,
  ],
  Object {
    "tag": "None",
  },
  Object {
    "tag": "Opt",
    "value": Object {
      "tag": "None",
    },
  },
  "test str",
  Object {
    "tag": "Err",
    "value": "test str",
  },
  Object {
    "tag": "Res",
    "value": Object {
      "tag": "Err",
      "value": "test str",
    },
  },
  Array [
    Object {
      "tag": "Opt",
      "value": Object {
        "tag": "None",
      },
    },
    Object {
      "tag": "Res",
      "value": Object {
        "tag": "Err",
        "value": "test str",
      },
    },
  ],
  "tuple value",
  Array [
    "tuple value",
  ],
  Object {
    "alias": Array [
      "test str",
    ],
    "array": Array [
      true,
      true,
      true,
    ],
    "bytesArray": Uint8Array [
      8,
      1,
      2,
      3,
      3,
    ],
    "enum": Object {
      "tag": "Empty",
    },
    "map": Map {
      "test str" => Array [
        "tuple value",
      ],
      "another key" => Array [
        "tuple value",
      ],
    },
    "primitive": true,
    "set": Set {
      Array [
        "tuple value",
      ],
      Array [
        "another tuple",
      ],
    },
    "tuple": Array [
      "tuple value",
    ],
    "vec": Array [
      Object {
        "tag": "Opt",
        "value": Object {
          "tag": "None",
        },
      },
      Object {
        "tag": "Res",
        "value": Object {
          "tag": "Err",
          "value": "test str",
        },
      },
    ],
  },
]
`;
