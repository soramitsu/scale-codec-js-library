use parity_scale_codec::{Compact, Encode};
use serde::Serialize;
use std::env;
use std::fmt::{Debug, Display};

fn main() {
    match parse_args().unwrap() {
        RunCommand::Compact => compact::run(),
        RunCommand::Int => int::run(),
        RunCommand::String => string::run(),
    }
}

enum RunCommand {
    Int,
    Compact,
    String,
}

fn parse_args() -> Result<RunCommand, String> {
    let args: Vec<String> = env::args().collect();

    if args.len() != 2 {
        return Err("Expected one command: ints | compacts | strings".to_owned());
    }

    let command = &args[1];
    if command == "ints" {
        Ok(RunCommand::Int)
    } else if command == "compacts" {
        Ok(RunCommand::Compact)
    } else if command == "strings" {
        Ok(RunCommand::String)
    } else {
        Err(format!("Unknown command: {}", command))
    }
}

mod string {
    use super::*;

    #[derive(Debug, Serialize)]
    struct EncodedInfo {
        src: String,
        hex_pure: String,
        hex_scale: String,
    }

    pub fn run() {
        let items: Vec<&str> = vec![
            "Hello, world!",
            "лЪЛђлИл▓лхЛѓ, л╝лИЛђ!",
            "­Ъўђ­ЪЦ│­ЪЉђ­ЪцдРђЇРЎѓ№ИЈ",
            "ТЌЦТюгУфъсЂДСйЋсЂІ",
            "СИГТќЄуџёТЮ▒УЦ┐",
            r##""лЪЛђлИл┐лЙл╝лИлйл░Лј Лѓлхл┐лхЛђЛї, ЛЂ л║л░л║лИл╝ лХл░л┤лйЛІл╝ лИлйЛѓлхЛђлхЛЂлЙл╝ ЛЈ ЛЂЛѓл░л╗ ЛЂл╗лхл┤лИЛѓЛї ЛѓлЙл│л┤л░ лил░ лИЛЁлйлхЛј лХлИлилйЛїЛј; Лѓл░л║лЙл│лЙ лИлйЛѓлхЛђлхЛЂл░ л┐ЛђлхлХл┤лх лйлх л▒ЛІл▓л░л╗лЙ. л» ЛЂ лйлхЛѓлхЛђл┐лхлйлИлхл╝ лИ ЛЂ л▒Лђл░лйЛїЛј лХл┤л░л╗ лИлйлЙл│л┤л░ лџлЙл╗Лј, л║лЙл│л┤л░ ЛЂл░л╝ ЛЂЛѓл░лйлЙл▓лИл╗ЛЂЛЈ Лѓл░л║ л▒лЙл╗лхлй, ЛЄЛѓлЙ лйлх л╝лЙл│ л▓ЛІЛЁлЙл┤лИЛѓЛї лИли л║лЙл╝лйл░ЛѓЛІ. л» л┤лЙ ЛѓлЙл│лЙ л▓лйлИл║л░л╗ л▓лЙ л▓ЛЂлх л╝лхл╗лЙЛЄлИ, лИлйЛѓлхЛђлхЛЂлЙл▓л░л╗ЛЂЛЈ л▓ЛЂЛЈл║лИл╝лИ ЛЂл╗ЛЃЛЁл░л╝лИ, ЛЄЛѓлЙ, л║л░лХлхЛѓЛЂЛЈ, ЛЂл┤лхл╗л░л╗ЛЂЛЈ ЛЂл┐л╗лхЛѓлйлИл║лЙл╝. л» лйлх л┐лЙлйлИл╝л░л╗, лйл░л┐ЛђлИл╝лхЛђ, л║л░л║ ЛЇЛѓлИ л╗Лјл┤лИ, лИл╝лхЛЈ ЛЂЛѓлЙл╗Лїл║лЙ лХлИлилйлИ, лйлх ЛЃл╝лхЛјЛѓ ЛЂл┤лхл╗л░ЛѓЛїЛЂЛЈ л▒лЙл│л░ЛЄл░л╝лИ (л▓л┐ЛђлЙЛЄлхл╝, лйлх л┐лЙлйлИл╝л░Лј лИ Лѓлхл┐лхЛђЛї). л» лилйл░л╗ лЙл┤лйлЙл│лЙ л▒лхл┤лйЛЈл║л░, л┐ЛђлЙ л║лЙЛѓлЙЛђлЙл│лЙ л╝лйлх л┐лЙЛѓлЙл╝ Лђл░ЛЂЛЂл║л░лиЛІл▓л░л╗лИ, ЛЄЛѓлЙ лЙлй ЛЃл╝лхЛђ ЛЂ л│лЙл╗лЙл┤ЛЃ, лИ, л┐лЙл╝лйЛј, ЛЇЛѓлЙ л▓ЛІл▓лхл╗лЙ л╝лхлйЛЈ лИли ЛЂлхл▒ЛЈ: лхЛЂл╗лИ л▒ЛІ л╝лЙлХлйлЙ л▒ЛІл╗лЙ ЛЇЛѓлЙл│лЙ л▒лхл┤лйЛЈл║л░ лЙлХлИл▓лИЛѓЛї, ЛЈ л▒ЛІ, л║л░лХлхЛѓЛЂЛЈ, л║л░лилйлИл╗ лхл│лЙ. люлйлх лИлйлЙл│л┤л░ ЛЂЛѓл░лйлЙл▓лИл╗лЙЛЂЛї л╗лхл│ЛЄлх лйл░ Лєлхл╗ЛІлх лйлхл┤лхл╗лИ, лИ ЛЈ л╝лЙл│ л▓ЛІЛЁлЙл┤лИЛѓЛї лйл░ ЛЃл╗лИЛєЛЃ; лйлЙ ЛЃл╗лИЛєл░ ЛЂЛѓл░л╗л░ лйл░л║лЙлйлхЛє л┐ЛђлЙлИлил▓лЙл┤лИЛѓЛї л▓лЙ л╝лйлх Лѓл░л║лЙлх лЙлил╗лЙл▒л╗лхлйлИлх, ЛЄЛѓлЙ ЛЈ л┐лЙ Лєлхл╗ЛІл╝ л┤лйЛЈл╝ лйл░ЛђлЙЛЄлйлЙ ЛЂлИл┤лхл╗ л▓лил░л┐лхЛђЛѓлИ, ЛЁлЙЛѓЛЈ лИ л╝лЙл│ л▓ЛІЛЁлЙл┤лИЛѓЛї, л║л░л║ лИ л▓ЛЂлх. л» лйлх л╝лЙл│ л▓ЛІлйлЙЛЂлИЛѓЛї ЛЇЛѓлЙл│лЙ ЛѕлйЛІЛђЛЈЛјЛЅлхл│лЙ, ЛЂЛЃлхЛѓЛЈЛЅлхл│лЙЛЂЛЈ, л▓лхЛЄлйлЙ лЙлил░л▒лЙЛЄлхлйлйлЙл│лЙ, ЛЃл│ЛђЛјл╝лЙл│лЙ лИ л▓ЛЂЛѓЛђлхл▓лЙлХлхлйлйлЙл│лЙ лйл░ЛђлЙл┤л░, л║лЙЛѓлЙЛђЛІл╣ ЛЂлйлЙл▓л░л╗ лЙл║лЙл╗лЙ л╝лхлйЛЈ л┐лЙ ЛѓЛђлЙЛѓЛЃл░Лђл░л╝. лџ ЛЄлхл╝ЛЃ лИЛЁ л▓лхЛЄлйл░ЛЈ л┐лхЛЄл░л╗Лї, л▓лхЛЄлйл░ЛЈ лИЛЁ ЛѓЛђлхл▓лЙл│л░ лИ ЛЂЛЃлхЛѓл░; л▓лхЛЄлйл░ЛЈ, ЛЃл│ЛђЛјл╝л░ЛЈ лил╗лЙЛЂЛѓЛї лИЛЁ (л┐лЙЛѓлЙл╝ЛЃ ЛЄЛѓлЙ лЙлйлИ лил╗ЛІ, лил╗ЛІ, лил╗ЛІ)? лџЛѓлЙ л▓лИлйлЙл▓л░Лѓ, ЛЄЛѓлЙ лЙлйлИ лйлхЛЂЛЄл░ЛЂЛѓлйЛІ лИ лйлх ЛЃл╝лхЛјЛѓ лХлИЛѓЛї, лИл╝лхЛЈ л▓л┐лхЛђлхл┤лИ л┐лЙ ЛѕлхЛЂЛѓлИл┤лхЛЂЛЈЛѓлИ л╗лхЛѓ лХлИлилйлИ? лЌл░ЛЄлхл╝ лЌл░ЛђлйлИЛєЛІлй л┤лЙл┐ЛЃЛЂЛѓлИл╗ ЛЂлхл▒ЛЈ ЛЃл╝лхЛђлхЛѓЛї ЛЂ л│лЙл╗лЙл┤ЛЃ, лИл╝лхЛЈ ЛЃ ЛЂлхл▒ЛЈ ЛѕлхЛЂЛѓЛїл┤лхЛЂЛЈЛѓ л╗лхЛѓ л▓л┐лхЛђлхл┤лИ? лў л║л░лХл┤ЛІл╣-ЛѓлЙ л┐лЙл║л░лиЛІл▓л░лхЛѓ ЛЂл▓лЙлх ЛђЛЃл▒лИЛЅлх, ЛЂл▓лЙлИ Лђл░л▒лЙЛЄлИлх ЛђЛЃл║лИ, лил╗лИЛѓЛЂЛЈ лИ л║ЛђлИЛЄлИЛѓ: ┬ФлюЛІ Лђл░л▒лЙЛѓл░лхл╝ л║л░л║ л▓лЙл╗ЛІ, л╝ЛІ ЛѓЛђЛЃл┤лИл╝ЛЂЛЈ, л╝ЛІ л│лЙл╗лЙл┤лйЛІ л║л░л║ ЛЂлЙл▒л░л║лИ лИ л▒лхл┤лйЛІ! лћЛђЛЃл│лИлх лйлх Лђл░л▒лЙЛѓл░ЛјЛѓ лИ лйлх ЛѓЛђЛЃл┤ЛЈЛѓЛЂЛЈ, л░ лЙлйлИ л▒лЙл│л░ЛѓЛІ!┬╗ (лњлхЛЄлйЛІл╣ л┐ЛђлИл┐лхл▓!) лаЛЈл┤лЙл╝ ЛЂ лйлИл╝лИ л▒лхл│л░лхЛѓ лИ ЛЂЛЃлхЛѓлИЛѓЛЂЛЈ ЛЂ ЛЃЛѓЛђл░ л┤лЙ лйлЙЛЄлИ л║л░л║лЙл╣-лйлИл▒ЛЃл┤Лї лйлхЛЂЛЄл░ЛЂЛѓлйЛІл╣ ЛЂл╝лЙЛђЛЄлЙл║ ┬ФлИли л▒л╗л░л│лЙЛђлЙл┤лйЛІЛЁ┬╗, лўл▓л░лй лцлЙл╝лИЛЄ лАЛЃЛђлИл║лЙл▓, РђЊ л▓ лйл░Лѕлхл╝ л┤лЙл╝лх, лйл░л┤ лйл░л╝лИ лХлИл▓лхЛѓ, РђЊ л▓лхЛЄлйлЙ ЛЂ л┐ЛђлЙл┤Лђл░лйлйЛІл╝лИ л╗лЙл║ЛѓЛЈл╝лИ, ЛЂ лЙл▒ЛЂЛІл┐л░л▓ЛѕлИл╝лИЛЂЛЈ л┐ЛЃл│лЙл▓лИЛєл░л╝лИ, ЛЃ Лђл░лилйЛІЛЁ л╗Лјл┤лхл╣ лйл░ л┐лЙЛЂЛІл╗л║л░ЛЁ, л┐лЙ ЛЄЛїлИл╝-лйлИл▒ЛЃл┤Лї л┐лЙЛђЛЃЛЄлхлйлИЛЈл╝, л┤л░ лхЛЅлх ЛЂ ЛЃЛѓЛђл░ л┤лЙ лйлЙЛЄлИ. лал░лил│лЙл▓лЙЛђлИЛѓлхЛЂЛї ЛЂ лйлИл╝: ┬ФлЉлхл┤лхлй, лйлИЛЅ лИ ЛЃл▒лЙл│, ЛЃл╝лхЛђл╗л░ лХлхлйл░, л╗лхл║л░ЛђЛЂЛѓл▓л░ л║ЛЃл┐лИЛѓЛї л▒ЛІл╗лЙ лйлх лйл░ ЛЄЛѓлЙ, л░ лилИл╝лЙл╣ лил░л╝лЙЛђлЙлилИл╗лИ Лђлхл▒лхлйл║л░; ЛЂЛѓл░ЛђЛѕл░ЛЈ л┤лЙЛЄЛї лйл░ ЛЂлЙл┤лхЛђлХл░лйЛїлх л┐лЙЛѕл╗л░Рђд┬╗; л▓лхЛЄлйлЙ ЛЁлйЛІЛЄлхЛѓ, л▓лхЛЄлйлЙ л┐л╗л░ЛЄлхЛѓЛЂЛЈ! лъ, лйлИл║л░л║лЙл╣, лйлИл║л░л║лЙл╣ л▓лЙ л╝лйлх лйлх л▒ЛІл╗лЙ лХл░л╗лЙЛЂЛѓлИ л║ ЛЇЛѓлИл╝ л┤ЛЃЛђл░л║л░л╝, лйлИ Лѓлхл┐лхЛђЛї, лйлИ л┐ЛђлхлХл┤лх, РђЊ ЛЈ ЛЂ л│лЙЛђл┤лЙЛЂЛѓЛїЛј ЛЇЛѓлЙ л│лЙл▓лЙЛђЛј! лЌл░ЛЄлхл╝ лХлх лЙлй ЛЂл░л╝ лйлх лалЙЛѓЛѕлИл╗Лїл┤? лџЛѓлЙ л▓лИлйлЙл▓л░Лѓ, ЛЄЛѓлЙ ЛЃ лйлхл│лЙ лйлхЛѓ л╝лИл╗л╗лИлЙлйлЙл▓, л║л░л║ ЛЃ лалЙЛѓЛѕлИл╗Лїл┤л░, ЛЄЛѓлЙ ЛЃ лйлхл│лЙ лйлхЛѓ л│лЙЛђЛІ лилЙл╗лЙЛѓЛІЛЁ лИл╝л┐лхЛђлИл░л╗лЙл▓ лИ лйл░л┐лЙл╗лхлЙлйл┤лЙЛђлЙл▓, Лѓл░л║лЙл╣ л│лЙЛђЛІ, Лѓл░л║лЙл╣ ЛѓлЙЛЄлйлЙ л▓ЛІЛЂлЙл║лЙл╣ л│лЙЛђЛІ, л║л░л║ лйл░ л╝л░ЛЂл╗лхлйлИЛєлх л┐лЙл┤ л▒л░л╗л░л│л░лйл░л╝лИ! лџлЙл╗лИ лЙлй лХлИл▓лхЛѓ, ЛЂЛѓл░л╗лЙ л▒ЛІЛѓЛї, л▓ЛЂЛЉ л▓ лхл│лЙ л▓л╗л░ЛЂЛѓлИ! лџЛѓлЙ л▓лИлйлЙл▓л░Лѓ, ЛЄЛѓлЙ лЙлй ЛЇЛѓлЙл│лЙ лйлх л┐лЙлйлИл╝л░лхЛѓ?" ┬Е"##,
            // https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html
            r#"
            Greek anthem
            ╬Брй▓ ╬│╬й¤Ѕ¤Ђрйи╬Х¤Ѕ р╝ђ¤ђрйИ ¤ёрй┤╬й ╬║рй╣¤ѕ╬и
            ¤ё╬┐р┐д ¤Ѓ¤ђ╬▒╬И╬╣╬┐р┐д ¤ёрй┤╬й ¤ё¤Ђ╬┐╬╝╬х¤Ђрйх,
            ¤Ѓрй▓ ╬│╬й¤Ѕ¤Ђрйи╬Х¤Ѕ р╝ђ¤ђрйИ ¤ёрй┤╬й рйё¤ѕ╬и
            ¤ђ╬┐рй║ ╬╝рй▓ ╬▓рйи╬▒ ╬╝╬х¤ё¤Ђрй▒╬х╬╣ ¤ёрй┤ ╬│р┐є.
            "#,
            r#"
            Proverbs in the Amharic language:

            рѕ░рѕЏрІГ ріарІГрЅ│рѕерѕх ріЋрїЅрѕЦ ріарІГріерѕ░рѕхрЇб
            рЅЦрѕІ ріФрѕѕріЮ ріЦріЋрІ░ріарЅБрЅ┤ рЅарЅєрѕўрїаріЮрЇб
            рїїрїЦ рІФрѕѕрЅцрЅ▒ рЅЂрѕЮрїЦріЊ ріљрІЇрЇб
            рІ░рѕђ рЅарѕЋрѕЇрѕЎ рЅЁрЅц рЅБрІГрїарїБ ріЋрїБрЅх рЅарїѕрІ░рѕѕрІЇрЇб
            рІеріарЇЇ рІѕрѕѕрѕЮрЅ│ рЅарЅЁрЅц ріарІГрЅ│рѕйрѕЮрЇб
            ріарІГрїЦ рЅарЅарѕІ рІ│рІІ рЅ░рѕўрЅ│рЇб
            рѕ▓рЅ░рѕерїЅрѕЎ рІГрІ░рѕерїЇрѕЎрЇб
            рЅђрѕх рЅарЅђрѕхрЇЦ рІЋріЋрЅЂрѕІрѕЇ рЅаріЦрїЇрѕЕ рІГрѕёрІ│рѕЇрЇб
            рІхрѕГ рЅбрІФрЅЦрѕГ ріаріЋрЅарѕ│ рІФрѕхрѕГрЇб
            рѕ░рІЇ ріЦріЋрІ░рЅцрЅ▒ ріЦріЋрїЁ ріЦріЋрІ░ рїЅрѕерЅцрЅ▒ ріарІГрЅ░рІ│рІ░рѕГрѕЮрЇб
            ріЦрїЇрІюрѕГ рІеріерЇѕрЅ░рІЇріЋ рїЅрѕ«рѕ« рѕ│рІГрІўрїІрІЇ ріарІГрІхрѕГрѕЮрЇб
            рІерїјрѕерЅцрЅх рѕїрЅБрЇЦ рЅбрІФрІЕрЅх рІГрѕхрЅЁ рЅБрІФрІЕрЅх рІФрїарѕЇрЅЁрЇб
            рѕЦрѕФ ріерѕўрЇЇрЅ│рЅх рѕЇрїёріЋ рѕІрЇІрЅ│рЅхрЇб
            рІЊрЅБрІГ рѕЏрІ░рѕфрІФ рІерѕѕрІЇрЇЦ рїЇріЋрІх рІГрІъ рІГрІърѕФрѕЇрЇб
            рІеріЦрѕхрѕІрѕЮ ріарїѕрѕЕ рѕўріФ рІеріарѕърѕФ ріарїѕрѕЕ рІІрѕГріФрЇб
            рЅ░ріЋрїІрѕј рЅбрЅ░рЇЅ рЅ░рѕўрѕЇрѕХ рЅБрЇЅрЇб
            рІѕрІ│рїЁрѕЁ рѕЏрѕГ рЅбрѕєріЋ рїерѕГрѕхрѕЁ ріарЅхрѕІрѕ░рІЇрЇб
            ріЦрїЇрѕГрѕЁріЋ рЅарЇЇрѕФрѕйрѕЁ рѕЇріГ рІўрѕГрїІрЇб
            "#,
            r#"
            Mathematics and Sciences:

                Рѕ« EРІЁda = Q,  n Рєњ Рѕъ, РѕЉ f(i) = РѕЈ g(i), РѕђxРѕѕРёЮ: РїѕxРїЅ = РѕњРїіРѕњxРїІ, ╬▒ РѕД ┬г╬▓ = ┬г(┬г╬▒ Рѕе ╬▓),

                РёЋ Ріє РёЋРѓђ Ріѓ Рёц Ріѓ Рёџ Ріѓ РёЮ Ріѓ Рёѓ, РіЦ < a РЅа b РЅА c РЅц d РЅф Ріц РЄњ (A РЄћ B),

                2HРѓѓ + OРѓѓ РЄї 2HРѓѓO, R = 4.7 k╬Е, Рїђ 200 mm

            Linguistics and dictionaries:

                ├░i ─▒nt╔Ў╦ѕn├д╩Ѓ╔Ўn╔Ўl f╔Ў╦ѕn╔Џt─▒k ╔Ўso╩іsi╦ѕe─▒╩Ѓn
                Y [╦ѕ╩Јpsil╔ћn], Yen [j╔Џn], Yoga [╦ѕjo╦љg╔Љ]

                APL:

                ((VРЇ│V)=РЇ│РЇ┤V)/VРєљ,V    РїиРєљРЇ│РєњРЇ┤РѕєРѕЄРіЃРђЙРЇјРЇЋРїѕ
            "#,
            "рџ╗рЏќ рџ│рџ╣рџФрџд рџдрџФрЏЈ рџ╗рЏќ рЏњрџбрЏърЏќ рџЕрџЙ рџдрџФрЏЌ рЏџрџфрџЙрЏърЏќ рџЙрџЕрџ▒рџдрџ╣рЏќрџфрџ▒рЏърџбрЏЌ рџ╣рЏЂрџд рџдрџф рџ╣рЏќрЏЦрџФ",
            r#"
            РАїРаЂРаДРаЉ Ра╝РаЂРањ  РАЇРаюРаЄРаЉРа╣Ра░Рај РАБРаЋРаї

            РАЇРаюРаЄРаЉРа╣ Ра║РаЂРај РаЎРаЉРаЂРаЎРањ РаъРаЋ РаЃРаЉРаЏРаћ Ра║РаіРа╣Ра▓ РА╣Ра╗РаЉ РаіРај РаЮРаЋ РаЎРа│РаЃРаъ
            Ра▒РаЂРаъРаЉРаДРа╗ РаЂРаЃРа│Раъ Ра╣РаЂРаъРа▓ РА╣РаЉ РаЌРаЉРаЏРаіРаїРа╗ РаЋРаІ РаЎРаіРај РаЃРаЦРаЌРаіРаЂРаЄ Ра║РаЂРај
            РајРаіРаЏРаЮРаФ РаЃРа╣ Ра╣РаЉ РаіРаЄРа╗РаЏРа╣РаЇРаЂРаЮРаѓ Ра╣РаЉ РаіРаЄРа╗РаЁРаѓ Ра╣РаЉ РаЦРаЮРаЎРа╗РаъРаЂРаЁРа╗Раѓ
            РаЂРаЮРаЎ Ра╣РаЉ РаАРаіРаЉРаІ РаЇРа│РаЌРаЮРа╗Ра▓ РАјРаіРаЌРаЋРаЋРаЏРаЉ РајРаіРаЏРаЮРаФ РаіРаъРа▓ РАЂРаЮРаЎ
            РАјРаіРаЌРаЋРаЋРаЏРаЉРа░Рај РаЮРаЂРаЇРаЉ Ра║РаЂРај РаЏРаЋРаЋРаЎ РаЦРаЈРаЋРаЮ Ра░РААРаЂРаЮРаЏРаЉРаѓ РаІРаЋРаЌ РаЂРаЮРа╣Ра╣РаћРаЏ РаЎРаЉ 
            РаАРаЋРајРаЉ РаъРаЋ РаЈРаЦРаъ РаЎРаіРај РаЎРаЂРаЮРаЎ РаъРаЋРа▓

            РАЋРаЄРаЎ РАЇРаюРаЄРаЉРа╣ Ра║РаЂРај РаЂРај РаЎРаЉРаЂРаЎ РаЂРај РаЂ РаЎРаЋРаЋРаЌРацРаЮРаЂРаіРаЄРа▓

            РАЇРаћРаЎРаќ РАі РаЎРаЋРаЮРа░Раъ РаЇРаЉРаЂРаЮ РаъРаЋ РајРаЂРа╣ Ра╣РаЂРаъ РАі РаЁРаЮРафРаѓ РаЋРаІ РаЇРа╣
            РафРаЮ РаЁРаЮРафРаЄРаФРаЏРаЉРаѓ Ра▒РаЂРаъ Ра╣Ра╗РаЉ РаіРај РаЈРаюРаъРаіРаіРаЦРаЄРаюРаЄРа╣ РаЎРаЉРаЂРаЎ РаЂРаЃРа│Раъ
            РаЂ РаЎРаЋРаЋРаЌРацРаЮРаЂРаіРаЄРа▓ РАі РаЇРаіРаБРаъ РаЎРаЂРаДРаЉ РаЃРаЉРа▓ РаћРаіРаЄРаћРаФРаѓ РаЇРа╣РајРаЉРаЄРаІРаѓ РаъРаЋ
            РаЌРаЉРаЏРаюРаЎ РаЂ РаіРаЋРаІРаІРаћРацРаЮРаЂРаіРаЄ РаЂРај Ра╣РаЉ РаЎРаЉРаЂРаЎРаЉРаї РаЈРаіРаЉРаіРаЉ РаЋРаІ РаіРаЌРаЋРаЮРаЇРаЋРаЮРаЏРа╗Ра╣ 
            Раћ Ра╣РаЉ РаъРаЌРаЂРаЎРаЉРа▓ РАЃРаЦРаъ Ра╣РаЉ Ра║РаіРајРаЎРаЋРаЇ РаЋРаІ Ра│РаЌ РаЂРаЮРаіРаЉРаїРаЋРаЌРај 
            РаіРај Раћ Ра╣РаЉ РајРаіРаЇРаіРаЄРаЉРає РаЂРаЮРаЎ РаЇРа╣ РаЦРаЮРаЎРаЂРаЄРаЄРафРаФ РаЎРаЂРаЮРаЎРај
            РаЕРаЂРаЄРаЄ РаЮРаЋРаъ РаЎРаіРаїРаЦРаЌРаЃ РаіРаъРаѓ РаЋРаЌ Ра╣РаЉ РАіРа│РаЮРаъРаЌРа╣Ра░Рај РаЎРаЋРаЮРаЉ РаІРаЋРаЌРа▓ РА╣Ра│
            Ра║РаіРаЄРаЄ Ра╣Ра╗РаЉРаІРаЋРаЌРаЉ РаЈРа╗РаЇРаіРаъ РаЇРаЉ РаъРаЋ РаЌРаЉРаЈРаЉРаЂРаъРаѓ РаЉРаЇРаЈРаЎРаЂРаъРаіРаіРаЂРаЄРаЄРа╣Раѓ Ра╣РаЂРаъ
            РАЇРаюРаЄРаЉРа╣ Ра║РаЂРај РаЂРај РаЎРаЉРаЂРаЎ РаЂРај РаЂ РаЎРаЋРаЋРаЌРацРаЮРаЂРаіРаЄРа▓
            "#,
        ];
        let items: Vec<EncodedInfo> = items
            .iter()
            .map(|s| EncodedInfo {
                src: s.to_string(),
                hex_pure: to_hex(&s.as_bytes().to_vec()),
                hex_scale: to_hex(&Encode::encode(s)),
            })
            .collect();

        println!("{}", serde_json::to_string_pretty(&items).unwrap());
    }
}

mod compact {
    use super::*;

    #[derive(Serialize)]
    struct EncodedInfo {
        num: String,
        hex: String,
    }

    pub fn run() {
        let nums: Vec<u128> = vec![
            0,
            u128::pow(2, 8 - 2) - 5,
            u128::pow(2, 14 - 2) - 5,
            u128::pow(2, 16 - 2) - 5,
            u128::pow(2, 24 - 2) - 5,
            u128::pow(2, 32 - 2) - 5,
            u128::pow(2, 40 - 2) - 5,
            u128::pow(2, 48 - 2) - 5,
            u128::pow(2, 64 - 2) - 5,
            u128::MAX,
        ];

        let info: Vec<EncodedInfo> = nums
            .iter()
            .map(|x| EncodedInfo {
                num: x.to_string(),
                hex: to_hex(&(Compact::from(*x).encode())),
            })
            .collect();

        println!("{}", serde_json::to_string_pretty(&info).unwrap());
    }
}

mod int {
    use super::*;
    use generic_nums::*;

    macro_rules! collect_encoded_info_as_vec {
        [$($num:expr),*] => {
            vec![$(collect_int_encoded_info($num)),*]
        };
    }

    pub fn run() {
        let nums: Vec<IntEncodedInfo> = collect_encoded_info_as_vec![
            0u8,
            0u16,
            0u32,
            0u64,
            0u128,
            0i8,
            0i16,
            0i32,
            0i64,
            0i128,
            -1i8,
            -1i16,
            -1i32,
            -1i64,
            -1i128,
            255u8,
            255u16,
            255u32,
            255u64,
            255u128,
            127i8,
            255i16,
            255i32,
            255i64,
            255i128,
            67u8,
            67u16,
            67u32,
            67u128,
            0x12345678u32,
            0x12345678i32,
            -0x12345678i32,
            0x12345678u64,
            -512i32,
            -226123i32,
            256u16,
            256i16,
            1234u32,
            -1234i32,
            -123i64,
            u8::MAX,
            u16::MAX,
            u32::MAX,
            u64::MAX,
            u128::MAX,
            i8::MAX,
            i16::MAX,
            i32::MAX,
            i64::MAX,
            i128::MAX,
            i8::MIN,
            i16::MIN,
            i32::MIN,
            i64::MIN,
            i128::MIN
        ];

        println!("{}", serde_json::to_string_pretty(&nums).unwrap());
    }

    #[derive(Debug, Serialize)]
    struct IntEncodedInfo {
        decimal: String,
        bits: u32,
        signed: bool,
        le: String,
        be: String,
    }

    fn collect_int_encoded_info<T: GenericInt + Display>(value: T) -> IntEncodedInfo {
        let IntMeta { bits, signed } = value.meta();

        IntEncodedInfo {
            decimal: format!("{}", value),
            bits,
            signed,
            le: to_hex(&value.le()),
            be: to_hex(&value.be()),
        }
    }
}

fn to_hex(val: &Vec<u8>) -> String {
    let mut parts: Vec<String> = Vec::with_capacity(val.len());

    for byte in val {
        parts.push(format!("{:0>2x}", byte));
    }

    parts.join(" ")
}

mod generic_nums {
    pub struct IntMeta {
        pub bits: u32,
        pub signed: bool,
    }

    pub trait GenericInt {
        fn be(&self) -> Vec<u8>;
        fn le(&self) -> Vec<u8>;
        fn meta(&self) -> IntMeta;
    }

    macro_rules! impl_generic {
        ($int_uint:ty, $bits:expr, $signed:expr) => {
            impl GenericInt for $int_uint {
                fn be(&self) -> Vec<u8> {
                    self.to_be_bytes().into()
                }

                fn le(&self) -> Vec<u8> {
                    self.to_le_bytes().into()
                }

                fn meta(&self) -> IntMeta {
                    IntMeta {
                        bits: $bits,
                        signed: $signed,
                    }
                }
            }
        };
    }

    impl_generic!(u8, 8, false);
    impl_generic!(u16, 16, false);
    impl_generic!(u32, 32, false);
    impl_generic!(u64, 64, false);
    impl_generic!(u128, 128, false);
    impl_generic!(i8, 8, true);
    impl_generic!(i16, 16, true);
    impl_generic!(i32, 32, true);
    impl_generic!(i64, 64, true);
    impl_generic!(i128, 128, true);
}
