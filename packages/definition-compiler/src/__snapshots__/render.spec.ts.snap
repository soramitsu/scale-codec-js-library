// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Renders enum 1`] = `
"import {
  EncodeSkippable,
  Enum,
  Valuable,
  decodeEnum,
  encodeEnum,
  str_Decoded,
  str_Encodable,
  str_decode,
  str_encode,
} from '@scale-codec/definition-compiler-runtime'

// Message

export type Message_Decoded = Enum<{
  Quit: null
  Greeting: Valuable<str_Decoded>
}>

export type Message_Encodable = Enum<{
  Quit: null
  Greeting: Valuable<str_Encodable | EncodeSkippable>
}>

// Message enum tools

const Message_decoders = {
  0: { v: 'Quit' },
  1: { v: 'Greeting', decode: str_decode },
}
const Message_encoders = {
  Quit: { d: 0 },
  Greeting: { d: 1, encode: str_encode },
}

// Message tools end

export function Message_decode(bytes: Uint8Array): Message_Decoded {
  return decodeEnum(bytes, Message_decoders)
}

export function Message_encode(encodable: Message_Encodable): Uint8Array {
  return encodeEnum(encodable, Message_encoders)
}
"
`;

exports[`Renders set 1`] = `
"import { EncodeSkippable, decodeSet, encodeSet, wrapSkippableEncode } from '@scale-codec/definition-compiler-runtime'

// Set_Message

export type Set_Message_Decoded = Set<Message_Decoded>

export type Set_Message_Encodable = Set<Message_Encodable | EncodeSkippable>

// Set_Message set tools

const Set_Message_entry_encode = wrapSkippableEncode(Message_decode)

// Set_Message tools end

export function Set_Message_decode(bytes: Uint8Array): Set_Message_Decoded {
  return decodeSet(bytes, Message_decode)
}

export function Set_Message_encode(encodable: Set_Message_Encodable): Uint8Array {
  return encodeSet(encodable, Set_Message_entry_encode)
}
"
`;

exports[`Renders struct + tuple 1`] = `
"import {
  EncodeSkippable,
  bool_Decoded,
  bool_Encodable,
  bool_decode,
  bool_encode,
  decodeStruct,
  decodeTuple,
  encodeStruct,
  encodeTuple,
  i128_Decoded,
  i128_Encodable,
  i128_decode,
  i128_encode,
  u8_Decoded,
  u8_Encodable,
  u8_decode,
  u8_encode,
  wrapSkippableEncode,
} from '@scale-codec/definition-compiler-runtime'

// Structural

export type Structural_Decoded = {
  nums: Tuple_u8_i128_Decoded
  mur: bool_Decoded
}

export type Structural_Encodable = {
  nums: Tuple_u8_i128_Encodable | EncodeSkippable
  mur: bool_Encodable | EncodeSkippable
}

// Structural struct tools

const Structural_order = ['nums', 'mur']
const Structural_decoders = {
  nums: Tuple_u8_i128_decode,
  mur: bool_decode,
}
const Structural_encoders = {
  nums: wrapSkippableEncode(Tuple_u8_i128_encode),
  mur: wrapSkippableEncode(bool_encode),
}

// Structural tools end

export function Structural_decode(bytes: Uint8Array): Structural_Decoded {
  return decodeStruct(bytes, Structural_decoders, Structural_order)
}

export function Structural_encode(encodable: Structural_Encodable): Uint8Array {
  return encodeStruct(encodable, Structural_encoders, Structural_order)
}

// Tuple_u8_i128

export type Tuple_u8_i128_Decoded = [u8_Decoded, i128_Decoded]

export type Tuple_u8_i128_Encodable = [u8_Encodable | EncodeSkippable, i128_Encodable | EncodeSkippable]

// Tuple_u8_i128 tuple-related tools

const Tuple_u8_i128_decoders = [u8_decode, i128_decode]
const Tuple_u8_i128_encoders = [u8_encode, i128_encode].wrap(wrapSkippableEncode)

// Tuple_u8_i128 tools end

export function Tuple_u8_i128_decode(bytes: Uint8Array): Tuple_u8_i128_Decoded {
  return decodeTuple(bytes, Tuple_u8_i128_decoders)
}

export function Tuple_u8_i128_encode(encodable: Tuple_u8_i128_Encodable): Uint8Array {
  return encodeTuple(encodable, Tuple_u8_i128_encoders)
}
"
`;

exports[`Renders vec 1`] = `
"import {
  EncodeSkippable,
  decodeVec,
  encodeVec,
  str_Decoded,
  str_Encodable,
  str_decode,
  str_encode,
} from '@scale-codec/definition-compiler-runtime'

// Vec_str

export type Vec_str_Decoded = str_Decoded[]

export type Vec_str_Encodable = (str_Encodable | EncodeSkippable)[]

export function Vec_str_decode(bytes: Uint8Array): Vec_str_Decoded {
  return decodeVec(bytes, str_decode)
}

export function Vec_str_encode(encodable: Vec_str_Encodable): Uint8Array {
  return encodeVec(encodable, str_encode)
}
"
`;
