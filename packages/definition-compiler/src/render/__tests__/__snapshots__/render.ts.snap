// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render import for the external type as expected 1`] = `
"import { MyCustomExternal } from './module-with-externals'
export { MyCustomExternal }
"
`;

exports[`Renders an alias for some inner type 1`] = `
"import { InnerValue, Str, createAliasBuilder } from '@scale-codec/definition-runtime'

export var StringAlias = createAliasBuilder<InnerValue<typeof Str>>('StringAlias', () => Str)
"
`;

exports[`Renders array 1`] = `
"import { InstanceViaBuilder, createArrayBuilder } from '@scale-codec/definition-runtime'

export var Array_Item_15 = createArrayBuilder<InstanceViaBuilder<typeof Item>[]>('Array_Item_15', () => Item, 15)
"
`;

exports[`Renders bytes array 1`] = `
"import { createBytesArrayBuilder } from '@scale-codec/definition-runtime'

export var Hash = createBytesArrayBuilder<Uint8Array>('Hash', 64)
"
`;

exports[`Renders empty struct as void alias 1`] = `
"import { Void as EmptyStruct } from '@scale-codec/definition-runtime'
export { EmptyStruct }
"
`;

exports[`Renders empty tuple as void alias 1`] = `
"import { Void as EmptyTuple } from '@scale-codec/definition-runtime'
export { EmptyTuple }
"
`;

exports[`Renders enum 1`] = `
"import { Enum, InstanceViaBuilder, Str, Valuable, createEnumBuilder } from '@scale-codec/definition-runtime'

export var Message = createEnumBuilder<Enum<{
    Quit: null,
    Greeting: Valuable<InstanceViaBuilder<typeof Str>>
}>>('Message', [[0, 'Quit'], [1, 'Greeting', () => Str]])
"
`;

exports[`Renders imports for the external type using the custom name if provided 1`] = `
"import { re_export_me as ReExportMe } from 'some-package'
export { ReExportMe }
"
`;

exports[`Renders map 1`] = `
"import { InstanceViaBuilder, Str, createMapBuilder } from '@scale-codec/definition-runtime'

export var Map_str_Message = createMapBuilder<Map<InstanceViaBuilder<typeof Str>, InstanceViaBuilder<typeof Message>>>('Map_str_Message', () => Str, () => Message)
"
`;

exports[`Renders option 1`] = `
"import { InstanceViaBuilder, Option, createOptionBuilder } from '@scale-codec/definition-runtime'

export var OptionHash = createOptionBuilder<Option<InstanceViaBuilder<typeof Hash>>>('OptionHash', () => Hash)
"
`;

exports[`Renders result 1`] = `
"import { I128, InstanceViaBuilder, Result, Str, createResultBuilder } from '@scale-codec/definition-runtime'

export var ResultI128Str = createResultBuilder<Result<InstanceViaBuilder<typeof I128>, InstanceViaBuilder<typeof Str>>>('ResultI128Str', () => I128, () => Str)
"
`;

exports[`Renders set 1`] = `
"import { InstanceViaBuilder, createSetBuilder } from '@scale-codec/definition-runtime'

export var Set_Message = createSetBuilder<Set<InstanceViaBuilder<typeof Message>>>('Set_Message', () => Message)
"
`;

exports[`Renders single tuple as alias in case when the related option is enabled 1`] = `
"import { Bool, InnerValue, InstanceViaBuilder, U128, U8, createAliasBuilder, createTupleBuilder } from '@scale-codec/definition-runtime'

export var MultiTuple = createTupleBuilder<[
    InstanceViaBuilder<typeof U8>,
    InstanceViaBuilder<typeof Bool>
]>('MultiTuple', [() => U8, () => Bool])

export var SingleTuple = createAliasBuilder<InnerValue<typeof U128>>('SingleTuple', () => U128)
"
`;

exports[`Renders struct + tuple 1`] = `
"import { Bool, I128, InstanceViaBuilder, U8, createStructBuilder, createTupleBuilder } from '@scale-codec/definition-runtime'

export var Structural = createStructBuilder<{
    nums: InstanceViaBuilder<typeof Tuple_u8_i128>,
    mur: InstanceViaBuilder<typeof Bool>
}>('Structural', [['nums', () => Tuple_u8_i128], ['mur', () => Bool]])

export var Tuple_u8_i128 = createTupleBuilder<[
    InstanceViaBuilder<typeof U8>,
    InstanceViaBuilder<typeof I128>
]>('Tuple_u8_i128', [() => U8, () => I128])
"
`;

exports[`Renders vec 1`] = `
"import { InstanceViaBuilder, Str, createVecBuilder } from '@scale-codec/definition-runtime'

export var Vec_str = createVecBuilder<InstanceViaBuilder<typeof Str>[]>('Vec_str', () => Str)
"
`;
