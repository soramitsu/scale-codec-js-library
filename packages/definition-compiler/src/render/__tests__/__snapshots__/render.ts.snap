// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render import for the external type as expected 1`] = `
"import { MyCustomExternal } from './module-with-externals'
export { MyCustomExternal }
"
`;

exports[`Renders an alias for some inner type 1`] = `
"import { Str, dynGetters } from '@scale-codec/definition-runtime'

export const StringAlias: typeof Str = dynGetters(() => Str)
"
`;

exports[`Renders array 1`] = `
"import { FragmentFromBuilder, ScaleArrayBuilder, createArrayBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const Array_Item_15: ScaleArrayBuilder<FragmentFromBuilder<typeof Item>[]> = createArrayBuilder('Array_Item_15', dynGetters(() => Item), 15)
"
`;

exports[`Renders bytes array 1`] = `
"import { createBytesArrayBuilder } from '@scale-codec/definition-runtime'

export const Hash = createBytesArrayBuilder('Hash', 64)
"
`;

exports[`Renders empty struct as void alias 1`] = `
"import { Void as EmptyStruct } from '@scale-codec/definition-runtime'
export { EmptyStruct }
"
`;

exports[`Renders empty tuple as void alias 1`] = `
"import { Void as EmptyTuple } from '@scale-codec/definition-runtime'
export { EmptyTuple }
"
`;

exports[`Renders enum 1`] = `
"import { Enum, FragmentFromBuilder, ScaleEnumBuilder, Str, Valuable, createEnumBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const Message: ScaleEnumBuilder<Enum<{
    Quit: null,
    Greeting: Valuable<FragmentFromBuilder<typeof Str>>
}>> = createEnumBuilder('Message', [[0, 'Quit'], [1, 'Greeting', dynGetters(() => Str)]])
"
`;

exports[`Renders imports for the external type using the custom name if provided 1`] = `
"import { re_export_me as ReExportMe } from 'some-package'
export { ReExportMe }
"
`;

exports[`Renders map 1`] = `
"import { FragmentFromBuilder, ScaleMapBuilder, Str, createMapBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const Map_str_Message: ScaleMapBuilder<Map<FragmentFromBuilder<typeof Str>, FragmentFromBuilder<typeof Message>>> = createMapBuilder('Map_str_Message', dynGetters(() => Str), dynGetters(() => Message))
"
`;

exports[`Renders option 1`] = `
"import { FragmentFromBuilder, Option, ScaleEnumBuilder, createOptionBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const OptionHash: ScaleEnumBuilder<Option<FragmentFromBuilder<typeof Hash>>> = createOptionBuilder('OptionHash', dynGetters(() => Hash))
"
`;

exports[`Renders result 1`] = `
"import { FragmentFromBuilder, I128, Result, ScaleEnumBuilder, Str, createResultBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const ResultI128Str: ScaleEnumBuilder<Result<FragmentFromBuilder<typeof I128>, FragmentFromBuilder<typeof Str>>> = createResultBuilder('ResultI128Str', dynGetters(() => I128), dynGetters(() => Str))
"
`;

exports[`Renders set 1`] = `
"import { FragmentFromBuilder, ScaleSetBuilder, createSetBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const Set_Message: ScaleSetBuilder<Set<FragmentFromBuilder<typeof Message>>> = createSetBuilder('Set_Message', dynGetters(() => Message))
"
`;

exports[`Renders single tuple as alias in case when the related option is enabled 1`] = `
"import { Bool, FragmentFromBuilder, ScaleTupleBuilder, U128, U8, createTupleBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const MultiTuple: ScaleTupleBuilder<[
    FragmentFromBuilder<typeof U8>,
    FragmentFromBuilder<typeof Bool>
]> = createTupleBuilder('MultiTuple', [dynGetters(() => U8), dynGetters(() => Bool)])

export const SingleTuple: typeof U128 = dynGetters(() => U128)
"
`;

exports[`Renders struct + tuple 1`] = `
"import { Bool, FragmentFromBuilder, I128, ScaleStructBuilder, ScaleTupleBuilder, U8, createStructBuilder, createTupleBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const Structural: ScaleStructBuilder<{
    nums: FragmentFromBuilder<typeof Tuple_u8_i128>,
    mur: FragmentFromBuilder<typeof Bool>
}> = createStructBuilder('Structural', [['nums', dynGetters(() => Tuple_u8_i128)], ['mur', dynGetters(() => Bool)]])

export const Tuple_u8_i128: ScaleTupleBuilder<[
    FragmentFromBuilder<typeof U8>,
    FragmentFromBuilder<typeof I128>
]> = createTupleBuilder('Tuple_u8_i128', [dynGetters(() => U8), dynGetters(() => I128)])
"
`;

exports[`Renders vec 1`] = `
"import { FragmentFromBuilder, ScaleArrayBuilder, Str, createVecBuilder, dynGetters } from '@scale-codec/definition-runtime'

export const Vec_str: ScaleArrayBuilder<FragmentFromBuilder<typeof Str>[]> = createVecBuilder('Vec_str', dynGetters(() => Str))
"
`;

exports[`Respects custom \`runtimeLib\` param 1`] = `
"import { Str, dynGetters } from 'custom-runtime-lib'

export const S: typeof Str = dynGetters(() => Str)
"
`;

exports[`Respects custom set of knowns types set 1`] = `
"import { Foo, dynGetters } from '@scale-codec/definition-runtime'

export const FooAlias: typeof Foo = dynGetters(() => Foo)

export const StrAlias: typeof Str = dynGetters(() => Str)
"
`;
