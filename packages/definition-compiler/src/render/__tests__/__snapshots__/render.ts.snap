// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render import for the external type as expected 1`] = `
"import { MyCustomExternal } from './module-with-externals'
export { MyCustomExternal }
"
`;

exports[`Renders an alias for some inner type 1`] = `
"import { Str, createAliasBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const StringAlias: typeof Str = createAliasBuilder('StringAlias', dynBuilder(() => Str))
"
`;

exports[`Renders array 1`] = `
"import { InstanceViaBuilder, ScaleArrayBuilder, createArrayBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const Array_Item_15: ScaleArrayBuilder<InstanceViaBuilder<typeof Item>[]> = createArrayBuilder('Array_Item_15', dynBuilder(() => Item), 15)
"
`;

exports[`Renders bytes array 1`] = `
"import { createBytesArrayBuilder } from '@scale-codec/definition-runtime'

export const Hash = createBytesArrayBuilder('Hash', 64)
"
`;

exports[`Renders empty struct as void alias 1`] = `
"import { Void as EmptyStruct } from '@scale-codec/definition-runtime'
export { EmptyStruct }
"
`;

exports[`Renders empty tuple as void alias 1`] = `
"import { Void as EmptyTuple } from '@scale-codec/definition-runtime'
export { EmptyTuple }
"
`;

exports[`Renders enum 1`] = `
"import { Enum, InstanceViaBuilder, ScaleEnumBuilder, Str, Valuable, createEnumBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const Message: ScaleEnumBuilder<Enum<{
    Quit: null,
    Greeting: Valuable<InstanceViaBuilder<typeof Str>>
}>> = createEnumBuilder('Message', [[0, 'Quit'], [1, 'Greeting', dynBuilder(() => Str)]])
"
`;

exports[`Renders imports for the external type using the custom name if provided 1`] = `
"import { re_export_me as ReExportMe } from 'some-package'
export { ReExportMe }
"
`;

exports[`Renders map 1`] = `
"import { InstanceViaBuilder, ScaleMapBuilder, Str, createMapBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const Map_str_Message: ScaleMapBuilder<Map<InstanceViaBuilder<typeof Str>, InstanceViaBuilder<typeof Message>>> = createMapBuilder('Map_str_Message', dynBuilder(() => Str), dynBuilder(() => Message))
"
`;

exports[`Renders option 1`] = `
"import { InstanceViaBuilder, Option, ScaleEnumBuilder, createOptionBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const OptionHash: ScaleEnumBuilder<Option<InstanceViaBuilder<typeof Hash>>> = createOptionBuilder('OptionHash', dynBuilder(() => Hash))
"
`;

exports[`Renders result 1`] = `
"import { I128, InstanceViaBuilder, Result, ScaleEnumBuilder, Str, createResultBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const ResultI128Str: ScaleEnumBuilder<Result<InstanceViaBuilder<typeof I128>, InstanceViaBuilder<typeof Str>>> = createResultBuilder('ResultI128Str', dynBuilder(() => I128), dynBuilder(() => Str))
"
`;

exports[`Renders set 1`] = `
"import { InstanceViaBuilder, ScaleSetBuilder, createSetBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const Set_Message: ScaleSetBuilder<Set<InstanceViaBuilder<typeof Message>>> = createSetBuilder('Set_Message', dynBuilder(() => Message))
"
`;

exports[`Renders single tuple as alias in case when the related option is enabled 1`] = `
"import { Bool, InstanceViaBuilder, ScaleTupleBuilder, U128, U8, createAliasBuilder, createTupleBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const MultiTuple: ScaleTupleBuilder<[
    InstanceViaBuilder<typeof U8>,
    InstanceViaBuilder<typeof Bool>
]> = createTupleBuilder('MultiTuple', [dynBuilder(() => U8), dynBuilder(() => Bool)])

export const SingleTuple: typeof U128 = createAliasBuilder('SingleTuple', dynBuilder(() => U128))
"
`;

exports[`Renders struct + tuple 1`] = `
"import { Bool, I128, InstanceViaBuilder, ScaleStructBuilder, ScaleTupleBuilder, U8, createStructBuilder, createTupleBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const Structural: ScaleStructBuilder<{
    nums: InstanceViaBuilder<typeof Tuple_u8_i128>,
    mur: InstanceViaBuilder<typeof Bool>
}> = createStructBuilder('Structural', [['nums', dynBuilder(() => Tuple_u8_i128)], ['mur', dynBuilder(() => Bool)]])

export const Tuple_u8_i128: ScaleTupleBuilder<[
    InstanceViaBuilder<typeof U8>,
    InstanceViaBuilder<typeof I128>
]> = createTupleBuilder('Tuple_u8_i128', [dynBuilder(() => U8), dynBuilder(() => I128)])
"
`;

exports[`Renders vec 1`] = `
"import { InstanceViaBuilder, ScaleArrayBuilder, Str, createVecBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const Vec_str: ScaleArrayBuilder<InstanceViaBuilder<typeof Str>[]> = createVecBuilder('Vec_str', dynBuilder(() => Str))
"
`;

exports[`Respects custom \`runtimeLib\` param 1`] = `
"import { Str, createAliasBuilder, dynBuilder } from 'custom-runtime-lib'

export const S: typeof Str = createAliasBuilder('S', dynBuilder(() => Str))
"
`;

exports[`Respects custom set of knowns types set 1`] = `
"import { Foo, createAliasBuilder, dynBuilder } from '@scale-codec/definition-runtime'

export const FooAlias: typeof Foo = createAliasBuilder('FooAlias', dynBuilder(() => Foo))

export const StrAlias: typeof Str = createAliasBuilder('StrAlias', dynBuilder(() => Str))
"
`;
