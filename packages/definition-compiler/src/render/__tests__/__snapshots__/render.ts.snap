// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render import for the external type as expected 1`] = `
"import { MyCustomExternal } from './module-with-externals'
export { MyCustomExternal }
"
`;

exports[`Renders an alias for some inner type 1`] = `
"import { DynCodec, Str, dynCodec } from '@scale-codec/definition-runtime'

export const StringAlias: DynCodec<typeof Str> = dynCodec(() => Str)
"
`;

exports[`Renders array 1`] = `
"import { VecCodec, createArrayCodec, dynCodec } from '@scale-codec/definition-runtime'

export const Array_Item_15: VecCodec<typeof Item> = createArrayCodec('Array_Item_15', dynCodec(() => Item), 15)
"
`;

exports[`Renders bytes array 1`] = `
"import { createArrayU8Codec } from '@scale-codec/definition-runtime'

export const Hash = createArrayU8Codec('Hash', 64)
"
`;

exports[`Renders empty struct as void alias 1`] = `
"import { Void as EmptyStruct } from '@scale-codec/definition-runtime'
export { EmptyStruct }
"
`;

exports[`Renders empty tuple as void alias 1`] = `
"import { Void as EmptyTuple } from '@scale-codec/definition-runtime'
export { EmptyTuple }
"
`;

exports[`Renders enum 1`] = `
"import { EnumCodec, Str, createEnumCodec, dynCodec } from '@scale-codec/definition-runtime'

export const Message: EnumCodec<
    | 'Quit'
    | ['Greeting', typeof Str]
> = createEnumCodec<any>('Message', [[0, 'Quit'], [1, 'Greeting', dynCodec(() => Str)]])
"
`;

exports[`Renders imports for the external type using the custom name if provided 1`] = `
"import { re_export_me as ReExportMe } from 'some-package'
export { ReExportMe }
"
`;

exports[`Renders map 1`] = `
"import { MapCodec, Str, createMapCodec, dynCodec } from '@scale-codec/definition-runtime'

export const Map_str_Message: MapCodec<typeof Str, typeof Message> = createMapCodec('Map_str_Message', dynCodec(() => Str), dynCodec(() => Message))
"
`;

exports[`Renders option 1`] = `
"import { OptionCodec, createOptionCodec, dynCodec } from '@scale-codec/definition-runtime'

export const OptionHash: OptionCodec<typeof Hash> = createOptionCodec('OptionHash', dynCodec(() => Hash))
"
`;

exports[`Renders result 1`] = `
"import { I128, ResultCodec, Str, createResultCodec, dynCodec } from '@scale-codec/definition-runtime'

export const ResultI128Str: ResultCodec<typeof I128, typeof Str> = createResultCodec('ResultI128Str', dynCodec(() => I128), dynCodec(() => Str))
"
`;

exports[`Renders set 1`] = `
"import { SetCodec, createSetCodec, dynCodec } from '@scale-codec/definition-runtime'

export const Set_Message: SetCodec<typeof Message> = createSetCodec('Set_Message', dynCodec(() => Message))
"
`;

exports[`Renders single tuple as alias in case when the related option is enabled 1`] = `
"import { Bool, DynCodec, TupleCodec, U128, U8, createTupleCodec, dynCodec } from '@scale-codec/definition-runtime'

export const MultiTuple: TupleCodec<[typeof U8, typeof Bool]> = createTupleCodec('MultiTuple', [dynCodec(() => U8), dynCodec(() => Bool)])

export const SingleTuple: DynCodec<typeof U128> = dynCodec(() => U128)
"
`;

exports[`Renders struct + tuple 1`] = `
"import { Bool, I128, StructCodec, TupleCodec, U8, createStructCodec, createTupleCodec, dynCodec } from '@scale-codec/definition-runtime'

export const Structural: StructCodec<{
    nums: typeof Tuple_u8_i128,
    mur: typeof Bool
}> = createStructCodec('Structural', [['nums', dynCodec(() => Tuple_u8_i128)], ['mur', dynCodec(() => Bool)]])

export const Tuple_u8_i128: TupleCodec<[typeof U8, typeof I128]> = createTupleCodec('Tuple_u8_i128', [dynCodec(() => U8), dynCodec(() => I128)])
"
`;

exports[`Renders vec 1`] = `
"import { Str, VecCodec, createVecCodec, dynCodec } from '@scale-codec/definition-runtime'

export const Vec_str: VecCodec<typeof Str> = createVecCodec('Vec_str', dynCodec(() => Str))
"
`;

exports[`Respects custom \`runtimeLib\` param 1`] = `
"import { DynCodec, Str, dynCodec } from 'custom-runtime-lib'

export const S: DynCodec<typeof Str> = dynCodec(() => Str)
"
`;

exports[`Respects custom set of knowns types set 1`] = `
"import { DynCodec, Foo, dynCodec } from '@scale-codec/definition-runtime'

export const FooAlias: DynCodec<typeof Foo> = dynCodec(() => Foo)

export const StrAlias: DynCodec<typeof Str> = dynCodec(() => Str)
"
`;
