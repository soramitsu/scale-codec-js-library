// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Renders array 1`] = `
"/* eslint-disable */
import {
  DecodeResult,
  EncodeAsIs,
  decodeArray,
  encodeArray,
  makeEncoderAsIsRespectable,
} from '@scale-codec/definition-compiler-runtime'

// Array_Item_15

export type Array_Item_15_Decoded = Item_Decoded[]

export type Array_Item_15_Encodable = (Item_Encodable | EncodeAsIs)[]

const Array_Item_15_item_encode = makeEncoderAsIsRespectable(Item_encode)
const Array_Item_15_len = 15

export function Array_Item_15_decode(bytes: Uint8Array): DecodeResult<Array_Item_15_Decoded> {
  return decodeArray(bytes, Item_decode, Array_Item_15_len)
}

export function Array_Item_15_encode(encodable: Array_Item_15_Encodable): Uint8Array {
  return encodeArray(encodable, Array_Item_15_item_encode, Array_Item_15_len)
}
"
`;

exports[`Renders bytes array 1`] = `
"/* eslint-disable */
import { DecodeResult, decodeUint8Array, encodeUint8Array } from '@scale-codec/definition-compiler-runtime'

// Hash

export type Hash_Decoded = Uint8Array

export type Hash_Encodable = Uint8Array

const Hash_len = 64

export function Hash_decode(bytes: Uint8Array): DecodeResult<Hash_Decoded> {
  return decodeUint8Array(bytes, Hash_len)
}

export function Hash_encode(encodable: Hash_Encodable): Uint8Array {
  return encodeUint8Array(encodable, Hash_len)
}
"
`;

exports[`Renders empty struct as void alias 1`] = `
"/* eslint-disable */

// EmptyStruct

// EmptyStruct is just a void alias

import {
  Void_Decoded as EmptyStruct_Decoded,
  Void_Encodable as EmptyStruct_Encodable,
  Void_decode as EmptyStruct_decode,
  Void_encode as EmptyStruct_encode,
} from '@scale-codec/definition-compiler-runtime'

export { EmptyStruct_Decoded, EmptyStruct_Encodable, EmptyStruct_decode, EmptyStruct_encode }
"
`;

exports[`Renders empty tuple as void alias 1`] = `
"/* eslint-disable */

// EmptyTuple

// EmptyTuple is just a void alias

import {
  Void_Decoded as EmptyTuple_Decoded,
  Void_Encodable as EmptyTuple_Encodable,
  Void_decode as EmptyTuple_decode,
  Void_encode as EmptyTuple_encode,
} from '@scale-codec/definition-compiler-runtime'

export { EmptyTuple_Decoded, EmptyTuple_Encodable, EmptyTuple_decode, EmptyTuple_encode }
"
`;

exports[`Renders enum 1`] = `
"/* eslint-disable */
import {
  DecodeResult,
  EncodeAsIs,
  Enum,
  EnumDecoders,
  EnumEncoders,
  Valuable,
  decodeEnum,
  encodeEnum,
  makeEncoderAsIsRespectable,
  str_Decoded,
  str_Encodable,
  str_decode,
  str_encode,
} from '@scale-codec/definition-compiler-runtime'

// Message

export type Message_Decoded = Enum<{
  Quit: null
  Greeting: Valuable<str_Decoded>
}>

export type Message_Encodable = Enum<{
  Quit: null
  Greeting: Valuable<str_Encodable | EncodeAsIs>
}>

// Message enum tools

const Message_decoders: EnumDecoders = {
  0: { v: 'Quit' },
  1: { v: 'Greeting', decode: str_decode },
}
const Message_encoders: EnumEncoders = {
  Quit: { d: 0 },
  Greeting: { d: 1, encode: makeEncoderAsIsRespectable(str_encode) },
}

// Message tools end

export function Message_decode(bytes: Uint8Array): DecodeResult<Message_Decoded> {
  return decodeEnum(bytes, Message_decoders)
}

export function Message_encode(encodable: Message_Encodable): Uint8Array {
  return encodeEnum(encodable, Message_encoders)
}
"
`;

exports[`Renders map 1`] = `
"/* eslint-disable */
import {
  DecodeResult,
  Encode,
  EncodeAsIs,
  decodeMap,
  encodeMap,
  makeEncoderAsIsRespectable,
  str_Decoded,
  str_Encodable,
  str_decode,
  str_encode,
} from '@scale-codec/definition-compiler-runtime'

// Map_str_Message

export type Map_str_Message_Decoded = Map<str_Decoded, Message_Decoded>

export type Map_str_Message_Encodable = Map<str_Encodable | EncodeAsIs, Message_Encodable | EncodeAsIs>

const [Map_str_Message_encode_key, Map_str_Message_encode_value] = ([str_encode, Message_encode] as any).map(
  makeEncoderAsIsRespectable
) as [Encode<str_Encodable | EncodeAsIs>, Encode<Message_Encodable | EncodeAsIs>]

export function Map_str_Message_decode(bytes: Uint8Array): DecodeResult<Map_str_Message_Decoded> {
  return decodeMap(bytes, str_decode, Message_decode)
}

export function Map_str_Message_encode(encodable: Map_str_Message_Encodable): Uint8Array {
  return encodeMap(encodable, Map_str_Message_encode_key, Map_str_Message_encode_value)
}
"
`;

exports[`Renders option 1`] = `
"/* eslint-disable */
import {
  DecodeResult,
  EncodeAsIs,
  EnumDecoders,
  EnumEncoders,
  Option,
  decodeEnum,
  encodeEnum,
  makeEncoderAsIsRespectable,
} from '@scale-codec/definition-compiler-runtime'

// OptionHash

export type OptionHash_Decoded = Option<Hash_Decoded>

export type OptionHash_Encodable = Option<Hash_Encodable | EncodeAsIs>

const OptionHash_decoders: EnumDecoders = {
  0: { v: 'None' },
  1: { v: 'Some', decode: Hash_decode },
}
const OptionHash_encoders: EnumEncoders = {
  None: { d: 0 },
  Some: { d: 1, encode: makeEncoderAsIsRespectable(Hash_encode) },
}

export function OptionHash_decode(bytes: Uint8Array): DecodeResult<OptionHash_Decoded> {
  return decodeEnum(bytes, OptionHash_decoders)
}

export function OptionHash_encode(encodable: OptionHash_Encodable): Uint8Array {
  return encodeEnum(encodable, OptionHash_encoders)
}
"
`;

exports[`Renders set 1`] = `
"/* eslint-disable */
import {
  DecodeResult,
  EncodeAsIs,
  decodeSet,
  encodeSet,
  makeEncoderAsIsRespectable,
} from '@scale-codec/definition-compiler-runtime'

// Set_Message

export type Set_Message_Decoded = Set<Message_Decoded>

export type Set_Message_Encodable = Set<Message_Encodable | EncodeAsIs>

// Set_Message set tools

const Set_Message_entry_encode = makeEncoderAsIsRespectable(Message_encode)

// Set_Message tools end

export function Set_Message_decode(bytes: Uint8Array): DecodeResult<Set_Message_Decoded> {
  return decodeSet(bytes, Message_decode)
}

export function Set_Message_encode(encodable: Set_Message_Encodable): Uint8Array {
  return encodeSet(encodable, Set_Message_entry_encode)
}
"
`;

exports[`Renders struct + tuple 1`] = `
"/* eslint-disable */
import {
  DecodeResult,
  EncodeAsIs,
  bool_Decoded,
  bool_Encodable,
  bool_decode,
  bool_encode,
  decodeStruct,
  decodeTuple,
  encodeStruct,
  encodeTuple,
  i128_Decoded,
  i128_Encodable,
  i128_decode,
  i128_encode,
  makeEncoderAsIsRespectable,
  u8_Decoded,
  u8_Encodable,
  u8_decode,
  u8_encode,
} from '@scale-codec/definition-compiler-runtime'

// Structural

export type Structural_Decoded = {
  nums: Tuple_u8_i128_Decoded
  mur: bool_Decoded
}

export type Structural_Encodable = {
  nums: Tuple_u8_i128_Encodable | EncodeAsIs
  mur: bool_Encodable | EncodeAsIs
}

const Structural_order: (keyof Structural_Decoded)[] = ['nums', 'mur']
const Structural_decoders = {
  nums: Tuple_u8_i128_decode,
  mur: bool_decode,
}
const Structural_encoders = {
  nums: makeEncoderAsIsRespectable(Tuple_u8_i128_encode),
  mur: makeEncoderAsIsRespectable(bool_encode),
}

export function Structural_decode(bytes: Uint8Array): DecodeResult<Structural_Decoded> {
  return decodeStruct(bytes, Structural_decoders, Structural_order)
}

export function Structural_encode(encodable: Structural_Encodable): Uint8Array {
  return encodeStruct(encodable, Structural_encoders, Structural_order)
}

// Tuple_u8_i128

export type Tuple_u8_i128_Decoded = [u8_Decoded, i128_Decoded]

export type Tuple_u8_i128_Encodable = [u8_Encodable | EncodeAsIs, i128_Encodable | EncodeAsIs]

// Tuple_u8_i128 tuple-related tools

const Tuple_u8_i128_decoders = [u8_decode, i128_decode]
const Tuple_u8_i128_encoders = ([u8_encode, i128_encode] as any).map(makeEncoderAsIsRespectable)

// Tuple_u8_i128 tools end

export function Tuple_u8_i128_decode(bytes: Uint8Array): DecodeResult<Tuple_u8_i128_Decoded> {
  return decodeTuple(bytes, Tuple_u8_i128_decoders as any)
}

export function Tuple_u8_i128_encode(encodable: Tuple_u8_i128_Encodable): Uint8Array {
  return encodeTuple(encodable, Tuple_u8_i128_encoders as any)
}
"
`;

exports[`Renders vec 1`] = `
"/* eslint-disable */
import {
  DecodeResult,
  EncodeAsIs,
  decodeVec,
  encodeVec,
  makeEncoderAsIsRespectable,
  str_Decoded,
  str_Encodable,
  str_decode,
  str_encode,
} from '@scale-codec/definition-compiler-runtime'

// Vec_str

export type Vec_str_Decoded = str_Decoded[]

export type Vec_str_Encodable = (str_Encodable | EncodeAsIs)[]

const Vec_str_item_encode = makeEncoderAsIsRespectable(str_encode)

export function Vec_str_decode(bytes: Uint8Array): DecodeResult<Vec_str_Decoded> {
  return decodeVec(bytes, str_decode)
}

export function Vec_str_encode(encodable: Vec_str_Encodable): Uint8Array {
  return encodeVec(encodable, Vec_str_item_encode)
}
"
`;
