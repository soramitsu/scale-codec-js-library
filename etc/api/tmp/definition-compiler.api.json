{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.19.4",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@scale-codec/definition-compiler!",
  "docComment": "/**\n * Tool to define complex SCALE-type namespaces and compile them to TypeScript\n *\n * @packageDocumentation\n */\n",
  "name": "@scale-codec/definition-compiler",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@scale-codec/definition-compiler!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefAlias:type",
          "docComment": "/**\n * Just an alias to the inner type\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefAlias = "
            },
            {
              "kind": "Content",
              "text": "{\n    ref: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefAlias",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefArray:type",
          "docComment": "/**\n * Fixed-length array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefArray = "
            },
            {
              "kind": "Content",
              "text": "{\n    item: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n    len: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefBytesArray:type",
          "docComment": "/**\n * It's like {@link DefArray} but for bytes (u8). Use it for bytes for better performance.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefBytesArray = "
            },
            {
              "kind": "Content",
              "text": "{\n    len: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefBytesArray",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefEnum:type",
          "docComment": "/**\n * Enum definition\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefEnum = "
            },
            {
              "kind": "Content",
              "text": "{\n    variants: "
            },
            {
              "kind": "Reference",
              "text": "DefEnumVariant",
              "canonicalReference": "@scale-codec/definition-compiler!DefEnumVariant:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefEnum",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefEnumVariant:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefEnumVariant = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: string;\n    discriminant: number;\n    ref?: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": " | null;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefEnumVariant",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefImport:type",
          "docComment": "/**\n * External type definition - import codec from external module\n *\n * @remarks\n *\n * Provides a possibility to define external types, e.g. to use some complex structure from another compiled namespace OR to define your own custom low-level codec for type that is not included into the SCALE codec spec by default.\n *\n * Note that the import should be of `FragmentBuilder` type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefImport = "
            },
            {
              "kind": "Content",
              "text": "{\n    module: string;\n    nameInModule?: string;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefImport",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefMap:type",
          "docComment": "/**\n * Map definition (e.g. `HashMap`, `BTreeMap`)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefMap = "
            },
            {
              "kind": "Content",
              "text": "{\n    key: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n    value: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefOption:type",
          "docComment": "/**\n * Option enum definition\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefOption = "
            },
            {
              "kind": "Content",
              "text": "{\n    some: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefOption",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefResult:type",
          "docComment": "/**\n * Result enum definition\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefResult = "
            },
            {
              "kind": "Content",
              "text": "{\n    ok: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n    err: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefSet:type",
          "docComment": "/**\n * Set definition (e.g. `HashSet`, `BTreeSet`)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefSet = "
            },
            {
              "kind": "Content",
              "text": "{\n    entry: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefSet",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefStruct:type",
          "docComment": "/**\n * Structure definition\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefStruct = "
            },
            {
              "kind": "Content",
              "text": "{\n    fields: "
            },
            {
              "kind": "Reference",
              "text": "DefStructField",
              "canonicalReference": "@scale-codec/definition-compiler!DefStructField:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefStruct",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefStructField:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefStructField = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: string;\n    ref: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefStructField",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefTuple:type",
          "docComment": "/**\n * Tuple definition\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefTuple = "
            },
            {
              "kind": "Content",
              "text": "{\n    items: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefTuple",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!DefVec:type",
          "docComment": "/**\n * `Vec<T>` definition\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DefVec = "
            },
            {
              "kind": "Content",
              "text": "{\n    item: "
            },
            {
              "kind": "Reference",
              "text": "TypeRef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DefVec",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!NamespaceDefinition:type",
          "docComment": "/**\n * The main map with all the definitions\n *\n * @remarks\n *\n * Name of type should be **a valid JavaScript identifier name**, because it will be compiled to an identifier.\n *\n * @example\n * ```ts\n * const definition: NamespaceDefinition = {\n *   Person: {\n *     t: 'struct',\n *     fields: [\n *       { name: 'name', ref: 'str' },\n *       { name: 'age', ref: 'u8' }\n *     ]\n *   },\n *   VecPerson: { t: 'vec', item: 'Person' }\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NamespaceDefinition = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "TypeDef",
              "canonicalReference": "@scale-codec/definition-compiler!TypeDef:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NamespaceDefinition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/definition-compiler!renderNamespaceDefinition:function(1)",
          "docComment": "/**\n * Renders provided definition into a valid TypeScript code.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function renderNamespaceDefinition(definition: "
            },
            {
              "kind": "Reference",
              "text": "NamespaceDefinition",
              "canonicalReference": "@scale-codec/definition-compiler!NamespaceDefinition:type"
            },
            {
              "kind": "Content",
              "text": ", params?: "
            },
            {
              "kind": "Reference",
              "text": "RenderNamespaceDefinitionParams",
              "canonicalReference": "@scale-codec/definition-compiler!RenderNamespaceDefinitionParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "definition",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "renderNamespaceDefinition"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@scale-codec/definition-compiler!RenderNamespaceDefinitionParams:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RenderNamespaceDefinitionParams "
            }
          ],
          "releaseTag": "Public",
          "name": "RenderNamespaceDefinitionParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@scale-codec/definition-compiler!RenderNamespaceDefinitionParams#rollupSingleTuplesIntoAliases:member",
              "docComment": "/**\n * Single tuples are always an arrays with a single element. It is possible to make final code cleaner (and a bit performant) if render such tuples just as aliases for the inner element. It is optional feature.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rollupSingleTuplesIntoAliases?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rollupSingleTuplesIntoAliases",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@scale-codec/definition-compiler!RenderNamespaceDefinitionParams#runtimeLib:member",
              "docComment": "/**\n * Runtime library with STD codecs + reexports from the core library.\n *\n * Defaults to `@scale-codec/definition-runtime`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "runtimeLib?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "runtimeLib",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@scale-codec/definition-compiler!RenderNamespaceDefinitionParams#runtimeTypes:member",
              "docComment": "/**\n * Types available in the runtime library.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "runtimeTypes?: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "runtimeTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!TypeDef:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TypeDef = "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefAlias",
              "canonicalReference": "@scale-codec/definition-compiler!DefAlias:type"
            },
            {
              "kind": "Content",
              "text": ", 'alias'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefArray",
              "canonicalReference": "@scale-codec/definition-compiler!DefArray:type"
            },
            {
              "kind": "Content",
              "text": ", 'array'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefBytesArray",
              "canonicalReference": "@scale-codec/definition-compiler!DefBytesArray:type"
            },
            {
              "kind": "Content",
              "text": ", 'bytes-array'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefVec",
              "canonicalReference": "@scale-codec/definition-compiler!DefVec:type"
            },
            {
              "kind": "Content",
              "text": ", 'vec'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefTuple",
              "canonicalReference": "@scale-codec/definition-compiler!DefTuple:type"
            },
            {
              "kind": "Content",
              "text": ", 'tuple'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefStruct",
              "canonicalReference": "@scale-codec/definition-compiler!DefStruct:type"
            },
            {
              "kind": "Content",
              "text": ", 'struct'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefMap",
              "canonicalReference": "@scale-codec/definition-compiler!DefMap:type"
            },
            {
              "kind": "Content",
              "text": ", 'map'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefSet",
              "canonicalReference": "@scale-codec/definition-compiler!DefSet:type"
            },
            {
              "kind": "Content",
              "text": ", 'set'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefEnum",
              "canonicalReference": "@scale-codec/definition-compiler!DefEnum:type"
            },
            {
              "kind": "Content",
              "text": ", 'enum'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefOption",
              "canonicalReference": "@scale-codec/definition-compiler!DefOption:type"
            },
            {
              "kind": "Content",
              "text": ", 'option'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefResult",
              "canonicalReference": "@scale-codec/definition-compiler!DefResult:type"
            },
            {
              "kind": "Content",
              "text": ", 'result'> | "
            },
            {
              "kind": "Reference",
              "text": "WithTMark",
              "canonicalReference": "@scale-codec/definition-compiler!~WithTMark:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DefImport",
              "canonicalReference": "@scale-codec/definition-compiler!DefImport:type"
            },
            {
              "kind": "Content",
              "text": ", 'import'>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TypeDef",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 49
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/definition-compiler!TypeRef:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TypeRef = "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TypeRef",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
