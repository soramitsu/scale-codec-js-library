{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.19.4",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@scale-codec/core!",
  "docComment": "/**\n * Core SCALE library with tools to encode to and decode SCALE binaries. It includes implementations for primitive types as well as for complex types.\n *\n * @packageDocumentation\n */\n",
  "name": "@scale-codec/core",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@scale-codec/core!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!BigIntTypes:type",
          "docComment": "/**\n * Set of integer types that are supported by codec for `bigint`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BigIntTypes = "
            },
            {
              "kind": "Reference",
              "text": "IntTypes",
              "canonicalReference": "@scale-codec/core!IntTypes:type"
            },
            {
              "kind": "Content",
              "text": " | `${'i' | 'u'}${64 | 128 | 256 | 512}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BigIntTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!countPositiveBigIntEffectiveBytes:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function countPositiveBigIntEffectiveBytes(positiveNum: "
            },
            {
              "kind": "Content",
              "text": "bigint"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "positiveNum",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "countPositiveBigIntEffectiveBytes"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createArrayDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createArrayDecoder<T>(decodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createArrayDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createArrayEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createArrayEncoder<T>(encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createArrayEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createBigIntDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createBigIntDecoder(ty: "
            },
            {
              "kind": "Reference",
              "text": "BigIntTypes",
              "canonicalReference": "@scale-codec/core!BigIntTypes:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ty",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "createBigIntDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createBigIntEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createBigIntEncoder(ty: "
            },
            {
              "kind": "Reference",
              "text": "BigIntTypes",
              "canonicalReference": "@scale-codec/core!BigIntTypes:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ty",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "createBigIntEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createEnumDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createEnumDecoder<E extends "
            },
            {
              "kind": "Reference",
              "text": "Enum",
              "canonicalReference": "@scale-codec/enum!Enum:class"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(decoders: "
            },
            {
              "kind": "Reference",
              "text": "EnumDecoders",
              "canonicalReference": "@scale-codec/core!EnumDecoders:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EnumDef",
              "canonicalReference": "@scale-codec/enum!EnumDef:type"
            },
            {
              "kind": "Content",
              "text": "<E>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decoders",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createEnumDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createEnumEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createEnumEncoder<E extends "
            },
            {
              "kind": "Reference",
              "text": "Enum",
              "canonicalReference": "@scale-codec/enum!Enum:class"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(encoders: "
            },
            {
              "kind": "Reference",
              "text": "EnumEncoders",
              "canonicalReference": "@scale-codec/core!EnumEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EnumDef",
              "canonicalReference": "@scale-codec/enum!EnumDef:type"
            },
            {
              "kind": "Content",
              "text": "<E>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<E>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createEnumEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createIntDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createIntDecoder(ty: "
            },
            {
              "kind": "Reference",
              "text": "IntTypes",
              "canonicalReference": "@scale-codec/core!IntTypes:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ty",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "createIntDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createIntEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createIntEncoder(ty: "
            },
            {
              "kind": "Reference",
              "text": "IntTypes",
              "canonicalReference": "@scale-codec/core!IntTypes:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ty",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "createIntEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createMapDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createMapDecoder<K, V>(decodeKey: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<K>"
            },
            {
              "kind": "Content",
              "text": ", decodeValue: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decodeKey",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "decodeValue",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createMapDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createMapEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createMapEncoder<K, V>(encodeKey: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<K>"
            },
            {
              "kind": "Content",
              "text": ", encodeValue: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encodeKey",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "encodeValue",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createMapEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createOptionDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createOptionDecoder<T extends "
            },
            {
              "kind": "Reference",
              "text": "Option",
              "canonicalReference": "@scale-codec/enum!Option:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(decodeSome: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OptionSome",
              "canonicalReference": "@scale-codec/core!~OptionSome:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decodeSome",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createOptionDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createOptionEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createOptionEncoder<T extends "
            },
            {
              "kind": "Reference",
              "text": "Option",
              "canonicalReference": "@scale-codec/enum!Option:type"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(encodeSome: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "OptionSome",
              "canonicalReference": "@scale-codec/core!~OptionSome:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encodeSome",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createOptionEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createResultDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createResultDecoder<T extends "
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "@scale-codec/enum!Result:type"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ">(decodeOk: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ResultOk",
              "canonicalReference": "@scale-codec/core!~ResultOk:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ", decodeErr: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ResultErr",
              "canonicalReference": "@scale-codec/core!~ResultErr:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decodeOk",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              }
            },
            {
              "parameterName": "decodeErr",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createResultDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createResultEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createResultEncoder<T extends "
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "@scale-codec/enum!Result:type"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ">(encodeOk: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ResultOk",
              "canonicalReference": "@scale-codec/core!~ResultOk:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ", encodeErr: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ResultErr",
              "canonicalReference": "@scale-codec/core!~ResultErr:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 14,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encodeOk",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              }
            },
            {
              "parameterName": "encodeErr",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createResultEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createSetDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createSetDecoder<T>(decodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createSetDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createSetEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createSetEncoder<T>(encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createSetEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createStructDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createStructDecoder<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(decoders: "
            },
            {
              "kind": "Reference",
              "text": "StructDecoders",
              "canonicalReference": "@scale-codec/core!StructDecoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decoders",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createStructDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createStructEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createStructEncoder<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(encoders: "
            },
            {
              "kind": "Reference",
              "text": "StructEncoders",
              "canonicalReference": "@scale-codec/core!StructEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createStructEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createTupleDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createTupleDecoder<T extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ">(decoders: "
            },
            {
              "kind": "Reference",
              "text": "TupleDecoders",
              "canonicalReference": "@scale-codec/core!TupleDecoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decoders",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createTupleDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createTupleEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createTupleEncoder<T extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ">(encoders: "
            },
            {
              "kind": "Reference",
              "text": "TupleEncoders",
              "canonicalReference": "@scale-codec/core!TupleEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createTupleEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createUint8ArrayDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createUint8ArrayDecoder(len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "createUint8ArrayDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createUint8ArrayEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createUint8ArrayEncoder(len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "createUint8ArrayEncoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createVecDecoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createVecDecoder<T>(decodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "decodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createVecDecoder"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!createVecEncoder:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createVecEncoder<T>(encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createVecEncoder"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!Decode:type",
          "docComment": "/**\n * Function that decodes data from a walker and yields it\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Decode<T> = "
            },
            {
              "kind": "Content",
              "text": "(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ") => T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Decode",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeArray:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeArray<T>(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", decodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "decodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "decodeArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeBigInt:function(1)",
          "docComment": "/**\n * Decodes `bigint` in Little-Endian\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeBigInt(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", ty: "
            },
            {
              "kind": "Reference",
              "text": "BigIntTypes",
              "canonicalReference": "@scale-codec/core!BigIntTypes:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "bigint"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "ty",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "decodeBigInt"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeBigIntVarious:function(1)",
          "docComment": "/**\n * Decodes `bigint` in Little-Endian. It is like {@link decodeBigInt} but is not binded to strict bytes count (1, 2, 4, 8, 16 etc)\n *\n * @remarks\n *\n * Does not mutate walker's offset!\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeBigIntVarious(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", bytes: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", signed: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "bigint"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "bytes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "signed",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "decodeBigIntVarious"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeBool:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeBool: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<boolean>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeBool",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeCompact:function(1)",
          "docComment": "/**\n * Decodes compact-encoded integer\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeCompact(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "bigint"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "decodeCompact"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeEnum:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeEnum<E extends "
            },
            {
              "kind": "Reference",
              "text": "Enum",
              "canonicalReference": "@scale-codec/enum!Enum:class"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", decoders: "
            },
            {
              "kind": "Reference",
              "text": "EnumDecoders",
              "canonicalReference": "@scale-codec/core!EnumDecoders:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EnumDef",
              "canonicalReference": "@scale-codec/enum!EnumDef:type"
            },
            {
              "kind": "Content",
              "text": "<E>>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            },
            {
              "parameterName": "decoders",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "decodeEnum"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeI128:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeI128: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeI128",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeI16:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeI16: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeI16",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeI32:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeI32: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeI32",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeI64:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeI64: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeI64",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeI8:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeI8: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeI8",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeInt:function(1)",
          "docComment": "/**\n * Decodes signed/unsigned 8/16/32 bits integers in Little-Endian\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeInt(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", ty: "
            },
            {
              "kind": "Reference",
              "text": "IntTypes",
              "canonicalReference": "@scale-codec/core!IntTypes:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "ty",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "decodeInt"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeMap:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeMap<K, V>(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", decodeKey: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<K>"
            },
            {
              "kind": "Content",
              "text": ", decodeValue: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "decodeKey",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "decodeValue",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "decodeMap"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeOptionBool:var",
          "docComment": "/**\n * Special decoder for `OptionBool` type from Rust's parity_scale_codec\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeOptionBool: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Option",
              "canonicalReference": "@scale-codec/enum!Option:type"
            },
            {
              "kind": "Content",
              "text": "<boolean>>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeOptionBool",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeSet:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeSet<T>(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", decodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "decodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "decodeSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeStr:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeStr(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "decodeStr"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeStruct:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeStruct<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", decoders: "
            },
            {
              "kind": "Reference",
              "text": "StructDecoders",
              "canonicalReference": "@scale-codec/core!StructDecoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "decoders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "decodeStruct"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeTuple:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeTuple<T extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ">(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", decoders: "
            },
            {
              "kind": "Reference",
              "text": "TupleDecoders",
              "canonicalReference": "@scale-codec/core!TupleDecoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "decoders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "decodeTuple"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeU128:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeU128: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeU128",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeU16:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeU16: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeU16",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeU32:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeU32: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeU32",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeU64:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeU64: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeU64",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeU8:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeU8: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeU8",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeUint8Array:function(1)",
          "docComment": "/**\n * decode `[u8; x]` array directly into the native `Uint8Array`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeUint8Array(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "decodeUint8Array"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeUint8Vec:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeUint8Vec: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeUint8Vec",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!decodeVec:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function decodeVec<T>(walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ", decodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "decodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "decodeVec"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!decodeVoid:var",
          "docComment": "/**\n * Decoder to handle void types like `()` from Rust\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "decodeVoid: "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<null>"
            }
          ],
          "releaseTag": "Public",
          "name": "decodeVoid",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!Encode:type",
          "docComment": "/**\n * Function that computes encoded size hint for a value and then receives that value again and encodes it into a walker\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Encode<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    (value: T, walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): void;\n    sizeHint: (value: T) => number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Encode",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeArray:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeArray<T>(arr: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arr",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeArray"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeArraySizeHint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeArraySizeHint<T>(arr: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arr",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeArraySizeHint"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeBigInt:function(1)",
          "docComment": "/**\n * Encodes `bigint` in Little-Endian\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeBigInt(bi: "
            },
            {
              "kind": "Content",
              "text": "bigint"
            },
            {
              "kind": "Content",
              "text": ", ty: "
            },
            {
              "kind": "Reference",
              "text": "BigIntTypes",
              "canonicalReference": "@scale-codec/core!BigIntTypes:type"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bi",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "ty",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "encodeBigInt"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeBool:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeBool: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<boolean>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeBool",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeCompact:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeCompact: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint | number>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeCompact",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeEnum:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeEnum<E extends "
            },
            {
              "kind": "Reference",
              "text": "Enum",
              "canonicalReference": "@scale-codec/enum!Enum:class"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(value: "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ", encoders: "
            },
            {
              "kind": "Reference",
              "text": "EnumEncoders",
              "canonicalReference": "@scale-codec/core!EnumEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EnumDef",
              "canonicalReference": "@scale-codec/enum!EnumDef:type"
            },
            {
              "kind": "Content",
              "text": "<E>>"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            },
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeEnum"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeEnumSizeHint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeEnumSizeHint<E extends "
            },
            {
              "kind": "Reference",
              "text": "Enum",
              "canonicalReference": "@scale-codec/enum!Enum:class"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ">(value: "
            },
            {
              "kind": "Content",
              "text": "E"
            },
            {
              "kind": "Content",
              "text": ", encoders: "
            },
            {
              "kind": "Reference",
              "text": "EnumEncoders",
              "canonicalReference": "@scale-codec/core!EnumEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<E extends "
            },
            {
              "kind": "Reference",
              "text": "Enum",
              "canonicalReference": "@scale-codec/enum!Enum:class"
            },
            {
              "kind": "Content",
              "text": "<infer D> ? D : never>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            },
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "E",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeEnumSizeHint"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeFactory:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeFactory<T>(fn: "
            },
            {
              "kind": "Content",
              "text": "(value: T, walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ", sizeHint: "
            },
            {
              "kind": "Content",
              "text": "(value: T) => number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "sizeHint",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeFactory"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeI128:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeI128: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeI128",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeI16:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeI16: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeI16",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeI32:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeI32: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeI32",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeI64:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeI64: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeI64",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeI8:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeI8: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeI8",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeInt:function(1)",
          "docComment": "/**\n * Encodes signed/unsigned 8/16/32 bits integers in Little-Endian\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeInt(value: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ty: "
            },
            {
              "kind": "Reference",
              "text": "IntTypes",
              "canonicalReference": "@scale-codec/core!IntTypes:type"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "ty",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "encodeInt"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeMap:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeMap<K, V>(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ", encodeKey: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<K>"
            },
            {
              "kind": "Content",
              "text": ", encodeValue: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<V>"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 12,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "encodeKey",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            },
            {
              "parameterName": "encodeValue",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeMapSizeHint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeMapSizeHint<K, V>(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": ", encodeKey: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<K>"
            },
            {
              "kind": "Content",
              "text": ", encodeValue: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "encodeKey",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            },
            {
              "parameterName": "encodeValue",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeMapSizeHint"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeOptionBool:var",
          "docComment": "/**\n * Special encoder for `OptionBool` type from Rust's parity_scale_codec\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeOptionBool: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Option",
              "canonicalReference": "@scale-codec/enum!Option:type"
            },
            {
              "kind": "Content",
              "text": "<boolean>>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeOptionBool",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodePositiveBigIntInto:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodePositiveBigIntInto(positiveNum: "
            },
            {
              "kind": "Content",
              "text": "bigint"
            },
            {
              "kind": "Content",
              "text": ", mutSlice: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", offset: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", bytesLimit: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "positiveNum",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "mutSlice",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "offset",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "bytesLimit",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "encodePositiveBigIntInto"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeSet:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeSet<T>(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeSetSizeHint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeSetSizeHint<T>(set: "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeSetSizeHint"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeStr:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeStr: "
            },
            {
              "kind": "Content",
              "text": "import(\"../types\")."
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<string>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeStr",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeStruct:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeStruct<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(struct: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", encoders: "
            },
            {
              "kind": "Reference",
              "text": "StructEncoders",
              "canonicalReference": "@scale-codec/core!StructEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "struct",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeStruct"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeStructSizeHint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeStructSizeHint<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(struct: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", encoders: "
            },
            {
              "kind": "Reference",
              "text": "StructEncoders",
              "canonicalReference": "@scale-codec/core!StructEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "struct",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeStructSizeHint"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeTuple:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeTuple<T extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ">(tuple: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", encoders: "
            },
            {
              "kind": "Reference",
              "text": "TupleEncoders",
              "canonicalReference": "@scale-codec/core!TupleEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tuple",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeTuple"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeTupleSizeHint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeTupleSizeHint<T extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ">(tuple: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", encoders: "
            },
            {
              "kind": "Reference",
              "text": "TupleEncoders",
              "canonicalReference": "@scale-codec/core!TupleEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tuple",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "encoders",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeTupleSizeHint"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeU128:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeU128: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeU128",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeU16:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeU16: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeU16",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeU32:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeU32: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeU32",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeU64:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeU64: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<bigint>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeU64",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeU8:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeU8: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<number>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeU8",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeUint8Array:function(1)",
          "docComment": "/**\n * Encode to `[u8; x]` Rust's array directly from the native `Uint8Array`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeUint8Array(value: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ", len: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "len",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "encodeUint8Array"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeUint8Vec:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeUint8Vec: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeUint8Vec",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeVec:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeVec<T>(vec: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", walker: "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "vec",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "walker",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeVec"
        },
        {
          "kind": "Function",
          "canonicalReference": "@scale-codec/core!encodeVecSizeHint:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function encodeVecSizeHint<T>(vec: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ", encodeItem: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "vec",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "encodeItem",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "encodeVecSizeHint"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@scale-codec/core!encodeVoid:var",
          "docComment": "/**\n * Encoder to handle void types like `()` from Rust\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "encodeVoid: "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<null>"
            }
          ],
          "releaseTag": "Public",
          "name": "encodeVoid",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!EnumDecoders:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EnumDecoders<Def extends "
            },
            {
              "kind": "Reference",
              "text": "EnumGenericDef",
              "canonicalReference": "@scale-codec/enum!EnumGenericDef:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [D in number]: "
            },
            {
              "kind": "Reference",
              "text": "TagsEmpty",
              "canonicalReference": "@scale-codec/enum!TagsEmpty:type"
            },
            {
              "kind": "Content",
              "text": "<Def> | (Def extends [infer T & string, infer V] ? "
            },
            {
              "kind": "Reference",
              "text": "DecodeTuple",
              "canonicalReference": "@scale-codec/core!~DecodeTuple:type"
            },
            {
              "kind": "Content",
              "text": "<T & string, V> : never);\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EnumDecoders",
          "typeParameters": [
            {
              "typeParameterName": "Def",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@scale-codec/core!EnumEncodeError:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EnumEncodeError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EnumEncodeError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@scale-codec/core!EnumEncodeError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EnumEncodeError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", encoders: "
                },
                {
                  "kind": "Reference",
                  "text": "EnumEncoders",
                  "canonicalReference": "@scale-codec/core!EnumEncoders:type"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "encoders",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!EnumEncoders:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EnumEncoders<Def extends "
            },
            {
              "kind": "Reference",
              "text": "EnumGenericDef",
              "canonicalReference": "@scale-codec/enum!EnumGenericDef:type"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [T in "
            },
            {
              "kind": "Reference",
              "text": "TagsEmpty",
              "canonicalReference": "@scale-codec/enum!TagsEmpty:type"
            },
            {
              "kind": "Content",
              "text": "<Def>]: number;\n} & {\n    [T in "
            },
            {
              "kind": "Reference",
              "text": "TagsValuable",
              "canonicalReference": "@scale-codec/enum!TagsValuable:type"
            },
            {
              "kind": "Content",
              "text": "<Def>]: "
            },
            {
              "kind": "Reference",
              "text": "EncodeTuple",
              "canonicalReference": "@scale-codec/core!~EncodeTuple:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TagValue",
              "canonicalReference": "@scale-codec/enum!TagValue:type"
            },
            {
              "kind": "Content",
              "text": "<Def, T>>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EnumEncoders",
          "typeParameters": [
            {
              "typeParameterName": "Def",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!IntTypes:type",
          "docComment": "/**\n * Set of integer types that are supported by codec for `number`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IntTypes = "
            },
            {
              "kind": "Content",
              "text": "`${'i' | 'u'}${8 | 16 | 32}`"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IntTypes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@scale-codec/core!SliceWalkerFinalOffsetError:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SliceWalkerFinalOffsetError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SliceWalkerFinalOffsetError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@scale-codec/core!SliceWalkerFinalOffsetError:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SliceWalkerFinalOffsetError` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(walker: "
                },
                {
                  "kind": "Reference",
                  "text": "Walker",
                  "canonicalReference": "@scale-codec/core!Walker:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "walker",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!StructDecoders:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StructDecoders<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof T]: [K, "
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]>];\n}[keyof T][]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StructDecoders",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!StructEncoders:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StructEncoders<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof T]: [K, "
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<T[K]>];\n}[keyof T][]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StructEncoders",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!TupleDecoders:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TupleDecoders<Tuple extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "Tuple extends [infer Head, ...infer Tail] ? ["
            },
            {
              "kind": "Reference",
              "text": "Decode",
              "canonicalReference": "@scale-codec/core!Decode:type"
            },
            {
              "kind": "Content",
              "text": "<Head>, ..."
            },
            {
              "kind": "Reference",
              "text": "TupleDecoders",
              "canonicalReference": "@scale-codec/core!TupleDecoders:type"
            },
            {
              "kind": "Content",
              "text": "<Tail>] : []"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TupleDecoders",
          "typeParameters": [
            {
              "typeParameterName": "Tuple",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@scale-codec/core!TupleEncoders:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TupleEncoders<Tuple extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "Tuple extends [infer Head, ...infer Tail] ? ["
            },
            {
              "kind": "Reference",
              "text": "Encode",
              "canonicalReference": "@scale-codec/core!Encode:type"
            },
            {
              "kind": "Content",
              "text": "<Head>, ..."
            },
            {
              "kind": "Reference",
              "text": "TupleEncoders",
              "canonicalReference": "@scale-codec/core!TupleEncoders:type"
            },
            {
              "kind": "Content",
              "text": "<Tail>] : []"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TupleEncoders",
          "typeParameters": [
            {
              "typeParameterName": "Tuple",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@scale-codec/core!Walker:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Walker "
            }
          ],
          "releaseTag": "Public",
          "name": "Walker",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@scale-codec/core!Walker#idx:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "idx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "idx",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@scale-codec/core!Walker#u8:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "u8: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "u8",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@scale-codec/core!Walker#view:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "view: "
                },
                {
                  "kind": "Reference",
                  "text": "DataView",
                  "canonicalReference": "!DataView:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "view",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@scale-codec/core!WalkerImpl:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WalkerImpl implements "
            },
            {
              "kind": "Reference",
              "text": "Walker",
              "canonicalReference": "@scale-codec/core!Walker:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WalkerImpl",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@scale-codec/core!WalkerImpl:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WalkerImpl` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferView",
                  "canonicalReference": "!ArrayBufferView:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@scale-codec/core!WalkerImpl#checkFinalOffset:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkFinalOffset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "checkFinalOffset"
            },
            {
              "kind": "Method",
              "canonicalReference": "@scale-codec/core!WalkerImpl.decode:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static decode<T>(source: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferView",
                  "canonicalReference": "!ArrayBufferView:interface"
                },
                {
                  "kind": "Content",
                  "text": ", decode: "
                },
                {
                  "kind": "Reference",
                  "text": "Decode",
                  "canonicalReference": "@scale-codec/core!Decode:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "decode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "decode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@scale-codec/core!WalkerImpl.encode:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static encode<T>(value: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", encode: "
                },
                {
                  "kind": "Reference",
                  "text": "Encode",
                  "canonicalReference": "@scale-codec/core!Encode:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "encode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "encode"
            },
            {
              "kind": "Property",
              "canonicalReference": "@scale-codec/core!WalkerImpl#idx:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "idx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "idx",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@scale-codec/core!WalkerImpl#setOffset:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setOffset(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setOffset"
            },
            {
              "kind": "Property",
              "canonicalReference": "@scale-codec/core!WalkerImpl#u8:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "u8: "
                },
                {
                  "kind": "Reference",
                  "text": "Uint8Array",
                  "canonicalReference": "!Uint8Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "u8",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@scale-codec/core!WalkerImpl#view:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "view: "
                },
                {
                  "kind": "Reference",
                  "text": "DataView",
                  "canonicalReference": "!DataView:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "view",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        }
      ]
    }
  ]
}
